import { ALIGNMENT } from './constants';
import { TILE_KIND } from './constants';
export declare const StyledTileRoot: import("styletron-react").StyletronComponent<"button", {
    $tileKind: keyof typeof TILE_KIND;
    $selected: boolean;
}>;
export declare const StyledTileGroupRoot: import("styletron-react").StyletronComponent<"div", {
    $length: number;
}>;
export declare const StyledHeaderContainer: import("styletron-react").StyletronComponent<"div", {
    $leadingContent?: boolean;
    $trailingContent?: boolean;
    $alignment?: keyof typeof ALIGNMENT;
}>;
export declare const StyledLeadingContentContainer: import("styletron-react").StyletronComponent<"div", {
    $disabled: boolean;
}>;
export declare const StyledTrailingContentContainer: import("styletron-react").StyletronComponent<"div", {
    $disabled: boolean;
}>;
export declare const StyledBodyContainer: import("styletron-react").StyletronComponent<"div", {
    $alignment?: keyof typeof ALIGNMENT;
}>;
export declare const StyledBodyContainerContent: import("styletron-react").StyletronComponent<"div", {}>;
export declare const StyledLabel: import("styletron-react").StyletronComponent<"p", {
    $disabled?: boolean;
}>;
export declare const StyledParagraph: import("styletron-react").StyletronComponent<"p", {
    $disabled?: boolean;
}>;
export declare function getContainerAlignment({ $alignment, $leadingContent, $trailingContent, }: {
    $alignment: keyof typeof ALIGNMENT | undefined;
    $leadingContent?: boolean | undefined;
    $trailingContent?: boolean | undefined;
}): {
    justifyContent: string;
};
export declare function getRootButtonColors({ $tileKind, $theme, $selected }: {
    $tileKind: any;
    $theme: any;
    $selected: any;
}): {
    backgroundColor: any;
    borderTopWidth: number;
    borderRightWidth: number;
    borderBottomWidth: number;
    borderLeftWidth: number;
    borderTopStyle: string;
    borderRightStyle: string;
    borderBottomStyle: string;
    borderLeftStyle: string;
    boxShadow: string;
    ':hover:enabled': {
        backgroundColor: any;
    };
    ':active:enabled': {
        backgroundColor: any;
    };
} | {
    backgroundColor: any;
    borderTopWidth: number;
    borderRightWidth: number;
    borderBottomWidth: number;
    borderLeftWidth: number;
    borderTopStyle: string;
    borderRightStyle: string;
    borderBottomStyle: string;
    borderLeftStyle: string;
    ':hover:enabled': {
        backgroundColor: any;
    };
    ':active:enabled': {
        backgroundColor: any;
    };
    boxShadow?: undefined;
};
export declare function getDisabledStyles({ $theme, $tileKind }: {
    $theme: any;
    $tileKind: any;
}): {
    backgroundColor: any;
    color: any;
    borderTopWidth: number;
    borderRightWidth: number;
    borderBottomWidth: number;
    borderLeftWidth: number;
    borderTopStyle: string;
    borderRightStyle: string;
    borderBottomStyle: string;
    borderLeftStyle: string;
    boxShadow: string;
} | {
    backgroundColor?: undefined;
    color?: undefined;
    borderTopWidth?: undefined;
    borderRightWidth?: undefined;
    borderBottomWidth?: undefined;
    borderLeftWidth?: undefined;
    borderTopStyle?: undefined;
    borderRightStyle?: undefined;
    borderBottomStyle?: undefined;
    borderLeftStyle?: undefined;
    boxShadow?: undefined;
};
