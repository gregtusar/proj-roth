"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.subYears = exports.subWeeks = exports.subMonths = exports.subDays = exports.setYear = exports.setSeconds = exports.setMonth = exports.setMinutes = exports.setHours = exports.monthDisabledBefore = exports.monthDisabledAfter = exports.isStartOfMonth = exports.isSameYear = exports.isSameMonth = exports.isSameDay = exports.isOutOfBounds = exports.isEndOfMonth = exports.isDayInRange = exports.isDayDisabled = exports.isBefore = exports.isAfter = exports.getYear = exports.getWeekdayMinInLocale = exports.getWeekdayInLocale = exports.getStartOfWeek = exports.getStartOfMonth = exports.getQuarterInLocale = exports.getMonthInLocale = exports.getMonth = exports.getMinutes = exports.getHours = exports.getEndOfWeek = exports.getEndOfMonth = exports.getEffectiveMinDate = exports.getEffectiveMaxDate = exports.getDate = exports.formatDate = exports.format = exports.applyTimeToDate = exports.applyDateToTime = exports.addYears = exports.addWeeks = exports.addMonths = exports.addDays = void 0;
var _dateFnsAdapter = _interopRequireDefault(require("./date-fns-adapter"));
var _dateHelpers = _interopRequireDefault(require("./date-helpers"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
/* eslint-disable import/extensions */

const defaultDateHelpers = new _dateHelpers.default(_dateFnsAdapter.default);
const {
  date: wrapDate
} = _dateFnsAdapter.default;
const formatDate = exports.formatDate = defaultDateHelpers.formatDate;
const getStartOfWeek = exports.getStartOfWeek = defaultDateHelpers.getStartOfWeek;
const getEndOfWeek = exports.getEndOfWeek = defaultDateHelpers.getEndOfWeek;
const getStartOfMonth = exports.getStartOfMonth = defaultDateHelpers.getStartOfMonth;
const getEndOfMonth = exports.getEndOfMonth = defaultDateHelpers.getEndOfMonth;
const isSameYear = exports.isSameYear = defaultDateHelpers.isSameYear;
const isSameMonth = exports.isSameMonth = defaultDateHelpers.isSameMonth;
const isSameDay = exports.isSameDay = defaultDateHelpers.isSameDay;
const isDayInRange = exports.isDayInRange = defaultDateHelpers.isDayInRange;
const isStartOfMonth = exports.isStartOfMonth = defaultDateHelpers.isStartOfMonth;
const isEndOfMonth = exports.isEndOfMonth = defaultDateHelpers.isEndOfMonth;
const getWeekdayMinInLocale = exports.getWeekdayMinInLocale = defaultDateHelpers.getWeekdayMinInLocale;
const getWeekdayInLocale = exports.getWeekdayInLocale = defaultDateHelpers.getWeekdayInLocale;
const getMonthInLocale = exports.getMonthInLocale = defaultDateHelpers.getMonthInLocale;
const getQuarterInLocale = exports.getQuarterInLocale = defaultDateHelpers.getQuarterInLocale;
const isDayDisabled = exports.isDayDisabled = defaultDateHelpers.isDayDisabled;
const isOutOfBounds = exports.isOutOfBounds = defaultDateHelpers.isOutOfBounds;
const monthDisabledBefore = exports.monthDisabledBefore = defaultDateHelpers.monthDisabledBefore;
const monthDisabledAfter = exports.monthDisabledAfter = defaultDateHelpers.monthDisabledAfter;
const getEffectiveMinDate = exports.getEffectiveMinDate = defaultDateHelpers.getEffectiveMinDate;
const getEffectiveMaxDate = exports.getEffectiveMaxDate = defaultDateHelpers.getEffectiveMaxDate;
const applyTimeToDate = exports.applyTimeToDate = defaultDateHelpers.applyTimeToDate;
const applyDateToTime = exports.applyDateToTime = defaultDateHelpers.applyDateToTime;
const createDirtySetter = setter => {
  return (dirtyDate, number) => setter(wrapDate(dirtyDate), number);
};
const createDirtyGetter = getter => {
  return dirtyDate => getter(wrapDate(dirtyDate));
};
const createDirtyCompare = compare => {
  return (fromDirty, toDirty) => {
    return compare(wrapDate(fromDirty), wrapDate(toDirty));
  };
};

// ** Re-exported from date-fns **

// these need to be able to accept either number or date
// to maintain parity with the old exports

// ** Date Setters **
const setSeconds = exports.setSeconds = createDirtySetter(defaultDateHelpers.setSeconds);
const setMinutes = exports.setMinutes = createDirtySetter(defaultDateHelpers.setMinutes);
const setHours = exports.setHours = createDirtySetter(defaultDateHelpers.setHours);
const setMonth = exports.setMonth = createDirtySetter(defaultDateHelpers.setMonth);
const setYear = exports.setYear = createDirtySetter(defaultDateHelpers.setYear);

// ** Date Getters **
const getMinutes = exports.getMinutes = createDirtyGetter(defaultDateHelpers.getMinutes);
const getHours = exports.getHours = createDirtyGetter(defaultDateHelpers.getHours);
const getDate = exports.getDate = createDirtyGetter(defaultDateHelpers.getDate);
const getMonth = exports.getMonth = createDirtyGetter(defaultDateHelpers.getMonth);
const getYear = exports.getYear = createDirtyGetter(defaultDateHelpers.getYear);

// ** Date Math
const addDays = exports.addDays = createDirtySetter(defaultDateHelpers.addDays);
const addWeeks = exports.addWeeks = createDirtySetter(defaultDateHelpers.addWeeks);
const addMonths = exports.addMonths = createDirtySetter(defaultDateHelpers.addMonths);
const addYears = exports.addYears = createDirtySetter(defaultDateHelpers.addYears);
const subDays = exports.subDays = createDirtySetter(defaultDateHelpers.subDays);
const subWeeks = exports.subWeeks = createDirtySetter(defaultDateHelpers.subWeeks);
const subMonths = exports.subMonths = createDirtySetter(defaultDateHelpers.subMonths);
const subYears = exports.subYears = createDirtySetter(defaultDateHelpers.subYears);

// ** Date Comparison

const isBefore = exports.isBefore = createDirtyCompare(defaultDateHelpers.isBefore);
const isAfter = exports.isAfter = createDirtyCompare(defaultDateHelpers.isAfter);

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const format = (date, format, locale) => defaultDateHelpers.format(date, format, locale);
exports.format = format;