"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.styled = styled;
exports.useStyletron = useStyletron;
exports.withStyle = void 0;
exports.withWrapper = withWrapper;
var React = _interopRequireWildcard(require("react"));
var _styletronStandard = require("styletron-standard");
var _themes = require("../../themes");
var _createMockTheme = _interopRequireDefault(require("../../test/create-mock-theme"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
const MOCK_THEME = (0, _createMockTheme.default)(_themes.LightTheme);
// @ts-ignore
const IDENTITY = x => x;
function useStyletron() {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  function css(styles) {
    return {
      label: 'useStyletron mock describes the applied css properties',
      ...styles
    };
  }
  return [css, MOCK_THEME];
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
function styled(ElementName, objOrFn = {}) {
  class MockStyledComponent extends React.Component {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "state", {});
    }
    static getDerivedStateFromProps(props) {
      const styleFnArg = {
        ...props,
        // If we use defaultProps, $theme unnecessarily ends up in snapshots
        $theme: props.$theme || MOCK_THEME
      };
      let styles = typeof objOrFn === 'function' ? objOrFn(styleFnArg) : objOrFn;

      // Check for runtime overrides
      let {
        $style
      } = props;
      if (typeof $style === 'function') {
        $style = $style(styleFnArg);
      }
      if ($style) {
        styles = {
          ...styles,
          ...$style
        };
      }
      return {
        styles
      };
    }
    getPassedProps() {
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      const {
        forwardedRef,
        ...restProps
      } = this.props;
      return Object.keys(restProps).reduce((acc, key) => {
        if (key[0] !== '$') {
          // @ts-ignore
          acc[key] = restProps[key];
        }
        return acc;
      }, {});
    }
    render() {
      return /*#__PURE__*/React.createElement(ElementName, _extends({
        ref: this.props.forwardedRef,
        "styled-component": "true",
        "test-style": JSON.stringify(this.state.styles, null, 2)
      }, this.getPassedProps()));
    }
  }

  // @ts-expect-error
  _defineProperty(MockStyledComponent, "displayName", 'MockStyledComponent');
  MockStyledComponent.__STYLETRON__ = {
    getInitialStyle: _styletronStandard.getInitialStyle,
    wrapper: IDENTITY,
    base: ElementName
  };
  return /*#__PURE__*/React.forwardRef((props, ref) =>
  /*#__PURE__*/
  // @ts-ignore
  React.createElement(MockStyledComponent, _extends({
    forwardedRef: ref
  }, props)));
}
const withStyle = exports.withStyle = styled;
function withWrapper(
// eslint-disable-next-line @typescript-eslint/no-explicit-any
StyledElement,
// eslint-disable-next-line @typescript-eslint/no-explicit-any
wrapperFn) {
  // eslint-disable-next-line react/display-name,@typescript-eslint/no-explicit-any
  return /*#__PURE__*/React.forwardRef((props, ref) => wrapperFn(StyledElement)({
    ref: ref,
    ...props,
    $theme: MOCK_THEME
  }));
}