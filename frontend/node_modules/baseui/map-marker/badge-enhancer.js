"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _overrides = require("../helpers/overrides");
var _styledComponents = require("./styled-components");
var _constants = require("./constants");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); } /*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
const BadgeEnhancer = ({
  pinHeadSize,
  markerType,
  badgeEnhancerSize = _constants.BADGE_ENHANCER_SIZES.none,
  badgeEnhancerContent: BadgeEnhancerContent,
  overrides = {}
}) => {
  if (badgeEnhancerSize === null || badgeEnhancerSize == _constants.BADGE_ENHANCER_SIZES.none) {
    return null;
  }
  if (badgeEnhancerSize !== _constants.BADGE_ENHANCER_SIZES.xSmall && !BadgeEnhancerContent) {
    if (process.env.NODE_ENV !== "production") {
      console.warn(`Badges (except for size ${_constants.BADGE_ENHANCER_SIZES.xSmall}) must contain content`);
    }
    return null;
  }
  if (markerType === _constants.PINHEAD_TYPES.floating) {
    if (process.env.NODE_ENV !== "production") {
      console.warn(`Badges can only be rendered on fixed markers`);
    }
    return null;
  }
  const positions = _constants.BADGE_ENHANCER_POSITIONS[pinHeadSize];
  const position = positions ? positions[badgeEnhancerSize] : null;
  if (!position) {
    if (process.env.NODE_ENV !== "production") {
      console.warn(`Badge size ${badgeEnhancerSize} cannot be rendered with pinhead size ${pinHeadSize}`);
    }
    return null;
  }
  const [BadgeEnhancerRoot, badgeEnhancerRootProps] = (0, _overrides.getOverrides)(overrides.BadgeEnhancer, _styledComponents.StyledBadgeEnhancerRoot);
  return /*#__PURE__*/React.createElement(BadgeEnhancerRoot, _extends({
    $size: badgeEnhancerSize,
    $position: position
  }, badgeEnhancerRootProps), BadgeEnhancerContent && badgeEnhancerSize !== _constants.BADGE_ENHANCER_SIZES.xSmall && /*#__PURE__*/React.createElement(BadgeEnhancerContent, {
    size: _constants.BADGE_ENHANCER_CONTENT_SIZE[badgeEnhancerSize]
  }));
};
var _default = exports.default = BadgeEnhancer;