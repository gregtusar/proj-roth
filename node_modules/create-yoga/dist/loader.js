"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const tar = require("tar");
const tmp = require("tmp");
const github = require("parse-github-url");
const fs = require("fs");
const ora = require("ora");
const request = require("request");
const execa = require("execa");
const chalk_1 = require("chalk");
function loadYogaStarter(template, output, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const tar = getYogaTemplateRepositoryTarInformation(template);
        const tmp = yield downloadRepository(tar);
        yield extractYogaStarterFromRepository(tmp, tar, output);
        if (options.installDependencies) {
            yield installYogaStarter(output);
        }
        console.log(template.postIntallMessage);
    });
}
exports.loadYogaStarter = loadYogaStarter;
function getYogaTemplateRepositoryTarInformation(template) {
    const meta = github(template.repo.uri);
    const uri = [
        `https://api.github.com/repos`,
        meta.repo,
        'tarball',
        template.repo.branch,
    ].join('/');
    return { uri, files: template.repo.path };
}
function downloadRepository(tar) {
    return __awaiter(this, void 0, void 0, function* () {
        const spinner = ora(`Downloading starter from ${chalk_1.default.cyan(tar.uri)}`).start();
        const tmpPath = tmp.fileSync({
            postfix: '.tar.gz',
        });
        yield new Promise(resolve => {
            request(tar.uri, {
                headers: {
                    'User-Agent': 'prisma/create-yoga',
                },
            })
                .pipe(fs.createWriteStream(tmpPath.name))
                .on('close', resolve);
        });
        spinner.succeed();
        return tmpPath.name;
    });
}
function extractYogaStarterFromRepository(tmp, repo, output) {
    return __awaiter(this, void 0, void 0, function* () {
        const spinner = ora(`Extracting content to ${chalk_1.default.cyan(output)}`);
        yield tar.extract({
            file: tmp,
            cwd: output,
            filter: path => RegExp(repo.files).test(path),
            strip: repo.files.split('/').length,
        });
        spinner.succeed();
        return;
    });
}
function installYogaStarter(path) {
    return __awaiter(this, void 0, void 0, function* () {
        const spinner = ora(`Installing dependencies üë©‚ÄçüöÄ`).start();
        process.chdir(path);
        try {
            if (yield isYarnInstalled()) {
                yield execa.shellSync('yarnpkg install', { stdio: `ignore` });
            }
            else {
                yield execa.shellSync('npm install', { stdio: `ignore` });
            }
            spinner.succeed();
        }
        catch (err) {
            spinner.fail();
        }
    });
}
function isYarnInstalled() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield execa.shell(`yarnpkg --version`, { stdio: `ignore` });
            return true;
        }
        catch (err) {
            return false;
        }
    });
}
//# sourceMappingURL=loader.js.map