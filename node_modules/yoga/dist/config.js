"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = __importStar(require("fs"));
var path = __importStar(require("path"));
var ts = __importStar(require("typescript"));
var helpers_1 = require("./helpers");
var yogaDefaults_1 = require("./yogaDefaults");
var dotenv = __importStar(require("dotenv"));
/**
 * Find a `prisma.yml` file if it exists
 */
function findPrismaConfigFile(projectDir) {
    var definitionPath = path.join(projectDir, 'prisma.yml');
    if (fs.existsSync(definitionPath)) {
        return definitionPath;
    }
    definitionPath = path.join(process.cwd(), 'prisma', 'prisma.yml');
    if (fs.existsSync(definitionPath)) {
        return definitionPath;
    }
    return null;
}
exports.findPrismaConfigFile = findPrismaConfigFile;
/**
 * Find a config file
 */
function findConfigFile(fileName, opts) {
    var configPath = ts.findConfigFile(
    /*searchPath*/ process.cwd(), ts.sys.fileExists, fileName);
    if (!configPath) {
        if (opts.required === true) {
            throw new Error("Could not find a valid '" + fileName + "'.");
        }
        else {
            return undefined;
        }
    }
    return configPath;
}
exports.findConfigFile = findConfigFile;
function findYogaConfigFile() {
    var nodeEnv = process.env.NODE_ENV || 'dev';
    var filePath = findConfigFile("yoga.config." + nodeEnv + ".ts", {
        required: false,
    });
    if (!filePath) {
        filePath = findConfigFile('yoga.config.ts', { required: false });
    }
    return filePath;
}
function injectCustomEnvironmentVariables(env) {
    var nodeEnv = env || process.env.NODE_ENV;
    dotenv.config({
        path: path.join(process.cwd(), nodeEnv ? ".env." + nodeEnv : '.env'),
    });
}
exports.injectCustomEnvironmentVariables = injectCustomEnvironmentVariables;
function getDatamodelInfoDir(yogaConfig, inputConfig, projectDir) {
    if (!yogaConfig.prisma) {
        return undefined;
    }
    if (inputConfig.prisma && inputConfig.prisma.datamodelInfoPath) {
        return path.join(projectDir, inputConfig.prisma.datamodelInfoPath);
    }
    return path.join(projectDir, yogaDefaults_1.DEFAULT_META_SCHEMA_DIR);
}
function getPrismaClientDir(yogaConfig, projectDir) {
    if (!yogaConfig.prisma) {
        return undefined;
    }
    if (!yogaConfig.prisma.datamodelInfo.clientPath) {
        throw new Error('Missing `clientPath` in generated `datamodelInfo`. Make sure to re-run nexus-prisma-generate@>=0.3.2');
    }
    return path.join(projectDir, yogaConfig.prisma.datamodelInfo.clientPath);
}
/**
 * Dynamically imports a `yoga.config.ts` file
 */
function importYogaConfig(opts) {
    if (opts === void 0) { opts = {
        invalidate: false,
        env: undefined,
    }; }
    injectCustomEnvironmentVariables(opts.env);
    var yogaConfigPath = findYogaConfigFile();
    var projectDir = path.dirname(yogaConfigPath
        ? yogaConfigPath
        : findConfigFile('package.json', { required: true }));
    var inputConfig = yogaConfigPath
        ? helpers_1.importFile(yogaConfigPath, 'default', opts.invalidate)
        : {};
    var yogaConfig = yogaDefaults_1.normalizeConfig(inputConfig, projectDir);
    return {
        yogaConfig: yogaConfig,
        yogaConfigPath: yogaConfigPath,
        inputConfig: inputConfig,
        projectDir: projectDir,
        datamodelInfoDir: getDatamodelInfoDir(yogaConfig, inputConfig, projectDir),
        prismaClientDir: getPrismaClientDir(yogaConfig, projectDir),
    };
}
exports.importYogaConfig = importYogaConfig;
//# sourceMappingURL=config.js.map