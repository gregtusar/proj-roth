"use strict";
// Borrowed from https://github.com/expo/spawn-async/blob/master/src/spawnAsync.ts
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var child_process_1 = require("child_process");
function spawnAsync(command, args, options) {
    if (options === void 0) { options = {}; }
    var child;
    var promise = new Promise(function (resolve, reject) {
        var ignoreStdio = options.ignoreStdio, nodeOptions = __rest(options
        // @ts-ignore: cross-spawn declares "args" to be a regular array instead of a read-only one
        , ["ignoreStdio"]);
        // @ts-ignore: cross-spawn declares "args" to be a regular array instead of a read-only one
        child = child_process_1.spawn(command, args, nodeOptions);
        var stdout = '';
        var stderr = '';
        if (!ignoreStdio) {
            if (child.stdout) {
                child.stdout.on('data', function (data) {
                    stdout += data;
                });
            }
            if (child.stderr) {
                child.stderr.on('data', function (data) {
                    stderr += data;
                });
            }
        }
        var completionListener = function (code, signal) {
            child.removeListener('error', errorListener);
            var result = {
                pid: child.pid,
                output: [stdout, stderr],
                stdout: stdout,
                stderr: stderr,
                status: code,
                signal: signal,
            };
            if (code !== 0) {
                var error = signal
                    ? new Error("Process exited with signal: " + signal)
                    : new Error("Process exited with non-zero code: " + code);
                Object.assign(error, result);
                reject(error);
            }
            else {
                resolve(result);
            }
        };
        var errorListener = function (error) {
            if (ignoreStdio) {
                child.removeListener('exit', completionListener);
            }
            else {
                child.removeListener('close', completionListener);
            }
            Object.assign(error, {
                pid: child.pid,
                output: [stdout, stderr],
                stdout: stdout,
                stderr: stderr,
                status: null,
                signal: null,
            });
            reject(error);
        };
        if (ignoreStdio) {
            child.once('exit', completionListener);
        }
        else {
            child.once('close', completionListener);
        }
        child.once('error', errorListener);
    });
    // @ts-ignore: TypeScript isn't aware the Promise constructor argument runs synchronously and
    // thinks `child` is not yet defined
    promise.child = child;
    return promise;
}
exports.spawnAsync = spawnAsync;
//# sourceMappingURL=spawnAsync.js.map