"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _overrides = require("../helpers/overrides");
var _styledComponents = require("./styled-components");
var _constants = require("./constants");
var _badgeEnhancer = _interopRequireDefault(require("./badge-enhancer"));
var _labelEnhancer = _interopRequireDefault(require("./label-enhancer"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); } /*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
const PinHead = ({
  size = _constants.PINHEAD_SIZES_SHAPES.medium,
  label = '',
  secondaryLabel = '',
  startEnhancer: StartEnhancer,
  endEnhancer: EndEnhancer,
  color,
  background,
  type = _constants.PINHEAD_TYPES.fixed,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  anchorType,
  needle = _constants.NEEDLE_SIZES.none,
  labelEnhancerContent,
  labelEnhancerPosition,
  badgeEnhancerSize,
  badgeEnhancerContent,
  overrides = {}
}) => {
  const activeElements = [label, StartEnhancer, EndEnhancer].filter(x => x);
  const gridTemplateColumns = activeElements.map(() => 'auto').join(' ');
  const forceCircle = activeElements.length === 1 && !label;
  const {
    height,
    icon
  } = _constants.PINHEAD_DIMENSIONS[size];
  const [PinHead, pinHeadProps] = (0, _overrides.getOverrides)(overrides.PinHead, _styledComponents.StyledPinHead);
  const [EnhancerSlot, enhancerSlotProps] = (0, _overrides.getOverrides)(overrides.EnhancerSlot, _styledComponents.StyledEnhancerSlot);
  const [LabelSlot, labelSlotProps] = (0, _overrides.getOverrides)(overrides.LabelSlot, _styledComponents.StyledLabelSlot);
  const [Label, labelProps] = (0, _overrides.getOverrides)(overrides.Label, _styledComponents.StyledLabel);
  const [SecondaryLabel, secondaryLabelProps] = (0, _overrides.getOverrides)(overrides.SecondaryLabel, _styledComponents.StyledLabel);
  const [InnerXXSmallAnchor, innerXXSmallAnchorProps] = (0, _overrides.getOverrides)(overrides.InnerAnchor, _styledComponents.StyledInnerXXSmallAnchor);
  const [OuterXXSmallAnchor, outerXXSmallAnchorProps] = (0, _overrides.getOverrides)(overrides.OuterAnchor, _styledComponents.StyledOuterXXSmallAnchor);
  const [InnerXSmallAnchor, innerXSmallAnchorProps] = (0, _overrides.getOverrides)(overrides.InnerAnchor, _styledComponents.StyledInnerXSmallAnchor);
  const [OuterXSmallAnchor, outerXSmallAnchorProps] = (0, _overrides.getOverrides)(overrides.OuterAnchor, _styledComponents.StyledOuterXSmallAnchor);
  const badge = /*#__PURE__*/React.createElement(_badgeEnhancer.default, {
    markerType: type,
    pinHeadSize: size,
    badgeEnhancerSize: badgeEnhancerSize,
    badgeEnhancerContent: badgeEnhancerContent,
    overrides: overrides
  });
  if (type === _constants.PINHEAD_TYPES.fixed && (size === _constants.PINHEAD_SIZES_SHAPES.xxSmallCircle || size === _constants.PINHEAD_SIZES_SHAPES.xxSmallSquare)) {
    const round = size === _constants.PINHEAD_SIZES_SHAPES.xxSmallCircle;
    return /*#__PURE__*/React.createElement(OuterXXSmallAnchor, _extends({
      $round: round,
      $background: background,
      $size: height
    }, outerXXSmallAnchorProps), /*#__PURE__*/React.createElement(InnerXXSmallAnchor, _extends({
      $color: color,
      $round: round,
      $size: icon
    }, innerXXSmallAnchorProps)));
  }
  if (type === _constants.PINHEAD_TYPES.fixed && (size === _constants.PINHEAD_SIZES_SHAPES.xSmallSquare || size === _constants.PINHEAD_SIZES_SHAPES.xSmallCircle)) {
    const round = size === _constants.PINHEAD_SIZES_SHAPES.xSmallCircle;
    return /*#__PURE__*/React.createElement(_styledComponents.RelativeContainer, null, badge, /*#__PURE__*/React.createElement(OuterXSmallAnchor, _extends({
      $round: round,
      $background: background,
      $size: height
    }, outerXSmallAnchorProps), /*#__PURE__*/React.createElement(InnerXSmallAnchor, _extends({
      $color: color,
      $round: round,
      $size: icon
    }, innerXSmallAnchorProps))));
  }
  const renderSecondaryLabel = (size === _constants.PINHEAD_SIZES_SHAPES.large || size === _constants.PINHEAD_SIZES_SHAPES.medium) && secondaryLabel;
  return /*#__PURE__*/React.createElement(_styledComponents.RelativeContainer, null, /*#__PURE__*/React.createElement(_labelEnhancer.default, {
    labelEnhancerContent: labelEnhancerContent,
    labelEnhancerPosition: labelEnhancerPosition,
    needleHeight: _constants.NEEDLE_HEIGHTS[needle],
    size: size,
    overrides: overrides
  }), badge, /*#__PURE__*/React.createElement(PinHead, _extends({
    $background: background,
    $height: height,
    $gridTemplateColumns: gridTemplateColumns,
    $forceCircle: forceCircle,
    $type: type
  }, pinHeadProps), StartEnhancer && /*#__PURE__*/React.createElement(EnhancerSlot, _extends({
    $height: height,
    $color: color,
    $size: size
  }, enhancerSlotProps), /*#__PURE__*/React.createElement(StartEnhancer, {
    size: icon
  })), label && /*#__PURE__*/React.createElement(LabelSlot, labelSlotProps, /*#__PURE__*/React.createElement(Label, _extends({
    $size: size,
    $renderSecondaryLabel: renderSecondaryLabel,
    $color: color
  }, labelProps), label), renderSecondaryLabel && /*#__PURE__*/React.createElement(SecondaryLabel, _extends({
    $size: size,
    $renderSecondaryLabel: renderSecondaryLabel,
    $color: color
  }, secondaryLabelProps), secondaryLabel)), EndEnhancer && /*#__PURE__*/React.createElement(EnhancerSlot, _extends({
    $height: height,
    $color: color,
    $size: size
  }, enhancerSlotProps), /*#__PURE__*/React.createElement(EndEnhancer, {
    size: icon
  }))));
};
var _default = exports.default = PinHead;