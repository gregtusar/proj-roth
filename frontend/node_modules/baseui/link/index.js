"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StyledLink = void 0;
var React = _interopRequireWildcard(require("react"));
var _styledComponents = require("./styled-components");
var _styles = require("../styles");
var _focusVisible = require("../utils/focusVisible");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); } /*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/ // Styled elements
// @ts-ignore
function LinkFocus(props) {
  const [focusVisible, setFocusVisible] = React.useState(false);
  const handleFocus = event => {
    if ((0, _focusVisible.isFocusVisible)(event)) {
      setFocusVisible(true);
    }
  };
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const handleBlur = event => {
    if (focusVisible !== false) {
      setFocusVisible(false);
    }
  };
  return props.children({
    focusVisible,
    handleFocus,
    handleBlur
  });
}
const StyledLink = exports.StyledLink = (0, _styles.withWrapper)(_styledComponents.Link, Styled => function StyledLink({
  animateUnderline,
  ...restProps
}) {
  return /*#__PURE__*/React.createElement(LinkFocus, null, focusProps => /*#__PURE__*/React.createElement(Styled, _extends({
    "data-baseweb": "link",
    $isAnimateUnderline: animateUnderline,
    $isFocusVisible: focusProps.focusVisible,
    onFocus: (0, _focusVisible.forkFocus)(restProps, focusProps.handleFocus),
    onBlur: (0, _focusVisible.forkBlur)(restProps, focusProps.handleBlur)
  }, restProps)));
});

/** @deprecated To be removed in future versions.*/