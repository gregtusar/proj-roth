#!/usr/bin/env node
"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var create_yoga_1 = require("create-yoga");
var yargs = __importStar(require("yargs"));
var build_1 = __importDefault(require("./commands/build"));
var scaffold_1 = __importDefault(require("./commands/scaffold"));
var start_1 = __importDefault(require("./commands/start"));
var watch_1 = __importDefault(require("./commands/watch"));
var eject_1 = __importDefault(require("./commands/eject"));
function run() {
    // tslint:disable-next-line:no-unused-expression
    yargs
        .usage('Usage: $0 <command> [options]')
        .command('new', 'Create new yoga project from template', {}, create_yoga_1.createTemplate)
        .command('start', 'Start the server', {}, start_1.default)
        .command('dev', 'Start the server in dev mode', {}, watch_1.default)
        .command('scaffold', 'Scaffold a new GraphQL type', {}, scaffold_1.default)
        .command('build', 'Build a yoga server', {}, build_1.default)
        .command('eject', 'Eject your project', {}, eject_1.default)
        .strict(true)
        .demandCommand()
        .option('env', {
        alias: 'e',
        description: 'Pass a custom NODE_ENV variable',
    })
        .help('help')
        .showHelpOnFail(true)
        .version().argv;
}
// Only call run when running from CLI, not when included for tests
if (require.main === module) {
    run();
}
//# sourceMappingURL=index.js.map