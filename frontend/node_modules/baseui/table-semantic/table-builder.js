"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _styledComponents = require("./styled-components");
var _overrides = require("../helpers/overrides");
var _blank = _interopRequireDefault(require("../icon/blank"));
var _chevronDown = _interopRequireDefault(require("../icon/chevron-down"));
var _chevronUp = _interopRequireDefault(require("../icon/chevron-up"));
var _focusVisible = require("../utils/focusVisible");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
class TableBuilder extends React.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      isFocusVisible: false
    });
    _defineProperty(this, "handleFocus", event => {
      if ((0, _focusVisible.isFocusVisible)(event)) {
        this.setState({
          isFocusVisible: true
        });
      }
    });
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _defineProperty(this, "handleBlur", event => {
      if (this.state.isFocusVisible !== false) {
        this.setState({
          isFocusVisible: false
        });
      }
    });
  }
  render() {
    const {
      overrides = {},
      children,
      data,
      divider,
      horizontalScrollWidth,
      sortColumn,
      sortOrder = 'ASC',
      onSort,
      isLoading,
      loadingMessage,
      emptyMessage,
      size,
      ...rest
    } = this.props;
    const [Root, rootProps] = (0, _overrides.getOverrides)(overrides.Root, _styledComponents.StyledRoot);
    const [Table, tableProps] = (0, _overrides.getOverrides)(overrides.Table, _styledComponents.StyledTable);
    const [TableHead, tableHeadProps] = (0, _overrides.getOverrides)(overrides.TableHead, _styledComponents.StyledTableHead);
    const [TableHeadRow, tableHeadRowProps] = (0, _overrides.getOverrides)(overrides.TableHeadRow, _styledComponents.StyledTableHeadRow);
    const [TableHeadCell, tableHeadCellProps] = (0, _overrides.getOverrides)(overrides.TableHeadCell, _styledComponents.StyledTableHeadCell);
    const [TableHeadCellSortable, tableHeadCellSortableProps] = (0, _overrides.getOverrides)(overrides.TableHeadCellSortable, _styledComponents.StyledTableHeadCellSortable);
    const [TableBody, tableBodyProps] = (0, _overrides.getOverrides)(overrides.TableBody, _styledComponents.StyledTableBody);
    const [TableBodyRow, tableBodyRowProps] = (0, _overrides.getOverrides)(overrides.TableBodyRow, _styledComponents.StyledTableBodyRow);
    const [TableBodyCell, tableBodyCellProps] = (0, _overrides.getOverrides)(overrides.TableBodyCell, _styledComponents.StyledTableBodyCell);
    const [TableLoadingMessage, tableLoadingMessageProps] = (0, _overrides.getOverrides)(overrides.TableLoadingMessage, _styledComponents.StyledTableLoadingMessage);
    const [TableEmptyMessage, tableEmptyMessageProps] = (0, _overrides.getOverrides)(overrides.TableEmptyMessage, _styledComponents.StyledTableEmptyMessage);
    const [SortIconContainer, sortIconContainerProps] = (0, _overrides.getOverrides)(overrides.SortIconContainer, _styledComponents.StyledSortIconContainer);
    const [SortAscIcon, sortAscIconProps] = (0, _overrides.getOverrides)(overrides.SortAscIcon, _chevronUp.default);
    const [SortDescIcon, sortDescIconProps] = (0, _overrides.getOverrides)(overrides.SortDescIcon, _chevronDown.default);
    const [SortNoneIcon, sortNoneIconProps] = (0, _overrides.getOverrides)(overrides.SortNoneIcon, _blank.default);
    const columns = React.Children.toArray(children).filter(Boolean)
    // @ts-expect-error todo(flow->ts): limit children to be only react elements
    .map(child => child.props);

    // @ts-ignore
    function renderHeader(col, colIndex, isFocusVisible) {
      const colOverrides = col.overrides || {};
      if (!col.sortable) {
        const [ColTableHeadCell, colTableHeadCellProps] = (0, _overrides.getOverrides)(colOverrides.TableHeadCell, TableHeadCell);
        return /*#__PURE__*/React.createElement(ColTableHeadCell, _extends({
          key: colIndex,
          $col: col,
          $colIndex: colIndex,
          $divider: divider,
          $isNumeric: col.numeric,
          $size: size
        }, tableHeadCellProps, colTableHeadCellProps), col.header);
      }
      const [ColTableHeadCellSortable, colTableHeadCellSortableProps] = (0, _overrides.getOverrides)(colOverrides.TableHeadCellSortable, TableHeadCellSortable);
      let SortIcon, sortIconProps, sortLabel;
      switch (col.id === sortColumn && sortOrder) {
        case 'ASC':
          SortIcon = SortAscIcon;
          sortIconProps = sortAscIconProps;
          sortLabel = 'ascending sorting';
          break;
        case 'DESC':
          SortIcon = SortDescIcon;
          sortIconProps = sortDescIconProps;
          sortLabel = 'descending sorting';
          break;
        default:
          SortIcon = SortNoneIcon;
          sortIconProps = sortNoneIconProps;
          sortLabel = 'not sorted';
          break;
      }

      // add background-color: inherit on container for non-Blank icons
      const sortIconContainerStyle = SortIcon === _blank.default ? sortIconContainerProps.$style : (0, _overrides.mergeConfigurationOverrides)({
        backgroundColor: 'inherit'
      }, sortIconContainerProps.$style);
      return /*#__PURE__*/React.createElement(ColTableHeadCellSortable, _extends({
        key: colIndex,
        $col: col,
        $colIndex: colIndex,
        $divider: divider,
        $isNumeric: col.numeric,
        role: "button",
        tabIndex: "0",
        "aria-label": `${col.tableHeadAriaLabel || col.header}, ${sortLabel}`,
        $isFocusVisible: isFocusVisible,
        onClick: () => onSort && onSort(col.id),
        onKeyDown: e => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            onSort && onSort(col.id);
          }
        }
      }, tableHeadCellSortableProps, colTableHeadCellSortableProps), col.header, /*#__PURE__*/React.createElement(SortIconContainer, _extends({}, sortIconContainerProps, {
        $style: sortIconContainerStyle
      }), /*#__PURE__*/React.createElement(SortIcon, _extends({
        size: "16px",
        "aria-hidden": "true",
        role: "presentation"
      }, sortIconProps))));
    }

    // @ts-ignore
    function renderCell(col, colIndex, row, rowIndex, lastRowindex) {
      const colOverrides = col.overrides || {};
      const [ColTableBodyCell, colTableBodyCellProps] = (0, _overrides.getOverrides)(colOverrides.TableBodyCell, TableBodyCell);
      return /*#__PURE__*/React.createElement(ColTableBodyCell, _extends({
        key: colIndex,
        $col: col,
        $colIndex: colIndex,
        $divider: divider,
        $row: row,
        $rowIndex: rowIndex,
        $isNumeric: col.numeric,
        $isLastRow: rowIndex === lastRowindex,
        $isSortable: col.sortable,
        $size: size
      }, tableBodyCellProps, colTableBodyCellProps), col.children(row, rowIndex));
    }
    const isEmpty = !isLoading && data.length === 0;
    const isRendered = !isLoading && !isEmpty;
    return /*#__PURE__*/React.createElement(Root, _extends({
      "data-baseweb": "table-builder-semantic",
      $divider: divider
    }, rootProps, rest), /*#__PURE__*/React.createElement(Table, _extends({
      $width: horizontalScrollWidth
    }, tableProps, {
      onBlur: (0, _focusVisible.forkBlur)(tableProps, this.handleBlur),
      onFocus: (0, _focusVisible.forkFocus)(tableProps, this.handleFocus)
    }), /*#__PURE__*/React.createElement(TableHead, tableHeadProps, /*#__PURE__*/React.createElement(TableHeadRow, tableHeadRowProps, columns.map((col, colIndex) => renderHeader(col, colIndex, this.state.isFocusVisible)))), /*#__PURE__*/React.createElement(TableBody, tableBodyProps, isLoading && /*#__PURE__*/React.createElement("tr", null, /*#__PURE__*/React.createElement("td", {
      colSpan: columns.length
    }, /*#__PURE__*/React.createElement(TableLoadingMessage, tableLoadingMessageProps, typeof loadingMessage === 'function' ? loadingMessage() : loadingMessage))), isEmpty && emptyMessage && /*#__PURE__*/React.createElement("tr", null, /*#__PURE__*/React.createElement("td", {
      colSpan: columns.length
    }, /*#__PURE__*/React.createElement(TableEmptyMessage, tableEmptyMessageProps, typeof emptyMessage === 'function' ? emptyMessage() : emptyMessage))), isRendered && data.map((row, rowIndex) => /*#__PURE__*/React.createElement(TableBodyRow, _extends({
      key: rowIndex,
      $divider: divider,
      $row: row,
      $rowIndex: rowIndex
    }, tableBodyRowProps), columns.map((col, colIndex) => renderCell(col, colIndex, row, rowIndex, data.length - 1)))))));
  }
}
exports.default = TableBuilder;
_defineProperty(TableBuilder, "defaultProps", {
  // @ts-ignore
  data: [],
  loadingMessage: 'Loading...'
});