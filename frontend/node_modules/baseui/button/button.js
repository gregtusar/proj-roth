"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _styledComponents = require("./styled-components");
var _utils = require("./utils");
var _buttonInternals = _interopRequireDefault(require("./button-internals"));
var _defaultProps = require("./default-props");
var _overrides = require("../helpers/overrides");
var _focusVisible = require("../utils/focusVisible");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
class Button extends React.Component {
  constructor(..._args) {
    super(..._args);
    _defineProperty(this, "state", {
      isFocusVisible: false
    });
    // @ts-ignore
    _defineProperty(this, "internalOnClick", (...args) => {
      const {
        isLoading,
        onClick
      } = this.props;
      if (isLoading) {
        args[0].preventDefault();
        return;
      }
      // @ts-expect-error
      onClick && onClick(...args);
    });
    _defineProperty(this, "handleFocus", event => {
      if ((0, _focusVisible.isFocusVisible)(event)) {
        this.setState({
          isFocusVisible: true
        });
      }
    });
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _defineProperty(this, "handleBlur", event => {
      if (this.state.isFocusVisible !== false) {
        this.setState({
          isFocusVisible: false
        });
      }
    });
  }
  render() {
    const {
      overrides = {},
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      size,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      kind,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      shape,
      isLoading,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      isSelected,
      // Removing from restProps
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      startEnhancer,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      endEnhancer,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      children,
      forwardedRef,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      colors,
      ...restProps
    } = this.props;
    // Get overrides
    const [BaseButton, baseButtonProps] = (0, _overrides.getOverrides)(
    // adding both (1) BaseButton and (2) Root
    // (1) because it's a Button under the hood
    // (2) because we want consistency with the rest of the components
    overrides.BaseButton || overrides.Root, _styledComponents.BaseButton);
    const [LoadingSpinner, loadingSpinnerProps] = (0, _overrides.getOverrides)(overrides.LoadingSpinner, _styledComponents.LoadingSpinner);
    const [LoadingSpinnerContainer, loadingSpinnerContainerProps] = (0, _overrides.getOverrides)(overrides.LoadingSpinnerContainer, _styledComponents.LoadingSpinnerContainer);
    const sharedProps = {
      ...(0, _utils.getSharedProps)(this.props),
      $isFocusVisible: this.state.isFocusVisible
    };
    const ariaLoadingElements = isLoading ? {
      ['aria-label']: typeof this.props.children === 'string' ? `loading ${this.props.children}` : 'content is loading',
      ['aria-busy']: 'true',
      ['aria-live']: 'polite'
    } : {};
    return /*#__PURE__*/React.createElement(BaseButton, _extends({
      ref: forwardedRef,
      "data-baseweb": "button"
    }, ariaLoadingElements, sharedProps, restProps, baseButtonProps, {
      // Applies last to override passed in onClick
      onClick: this.internalOnClick,
      onFocus: (0, _focusVisible.forkFocus)({
        ...restProps,
        ...baseButtonProps
      }, this.handleFocus),
      onBlur: (0, _focusVisible.forkBlur)({
        ...restProps,
        ...baseButtonProps
      }, this.handleBlur)
    }), isLoading ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_buttonInternals.default, this.props), /*#__PURE__*/React.createElement(LoadingSpinnerContainer, _extends({}, sharedProps, loadingSpinnerContainerProps), /*#__PURE__*/React.createElement(LoadingSpinner, _extends({}, sharedProps, loadingSpinnerProps)))) : /*#__PURE__*/React.createElement(_buttonInternals.default, this.props));
  }
}
_defineProperty(Button, "defaultProps", _defaultProps.defaultProps);
const ForwardedButton = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(Button, _extends({
  forwardedRef: ref
}, props)));
ForwardedButton.displayName = 'Button';
var _default = exports.default = ForwardedButton;