"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _overrides = require("../helpers/overrides");
var _styledComponents = require("./styled-components");
var _constants = require("./constants");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); } /*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
const MAX_DOTS = 5;
const PageControl = ({
  currentPage,
  numPages,
  onPageChange,
  kind = _constants.KIND.default,
  disabled = false,
  'aria-label': ariaLabel,
  overrides = {}
}) => {
  const [Root, RootProps] = (0, _overrides.getOverrides)(overrides.Root, _styledComponents.StyledRoot);
  const [Dot, DotProps] = (0, _overrides.getOverrides)(overrides.Dot, _styledComponents.StyledDot);
  const isOverflow = numPages > MAX_DOTS;
  function isActive(page) {
    return page === currentPage;
  }
  function isVisible(page) {
    if (!isOverflow) return true;
    // if current page is one of first three pages, first five page dots are visible
    if (currentPage <= 3) {
      return page <= 5;
    }
    // if current page is one of last three pages, last five page dots are visible
    if (numPages - currentPage < 3) {
      return page > numPages - 5;
    }
    // otherwise, page must be within 2 of the current page for dot to be visible
    return page >= currentPage - 2 && page <= currentPage + 2;
  }
  function getSize(page) {
    if (!isOverflow) return _constants.SIZE.large;
    if (currentPage <= 3) {
      if (page <= 3) {
        return _constants.SIZE.large;
      }
      if (page === 4) {
        return _constants.SIZE.medium;
      }
      return _constants.SIZE.small;
    }
    if (numPages - currentPage < 3) {
      if (page > numPages - 3) {
        return _constants.SIZE.large;
      }
      if (page === numPages - 3) {
        return _constants.SIZE.medium;
      }
      return _constants.SIZE.small;
    }
    if (page >= currentPage - 1 && page <= currentPage + 1) {
      return _constants.SIZE.large;
    }
    if (page === currentPage - 2 || page === currentPage + 2) {
      return _constants.SIZE.medium;
    }
    return _constants.SIZE.small;
  }
  const name = React.useId();
  return /*#__PURE__*/React.createElement(Root, _extends({
    $kind: kind,
    role: "radiogroup",
    "aria-label": ariaLabel || 'page control'
  }, RootProps), Array.from({
    length: numPages
  }, (_, i) => {
    const page = i + 1;
    return /*#__PURE__*/React.createElement(Dot, _extends({
      $active: isActive(page),
      $kind: kind,
      $disabled: disabled,
      $isVisible: isVisible(page),
      $size: getSize(page),
      checked: isActive(page),
      key: page,
      "aria-label": `page ${page}`,
      name: name
      // @ts-expect-error todo(ts-migration) TS2722 Cannot invoke an object which is possibly 'undefined'.
      ,
      onChange: () => onPageChange({
        nextPage: page
      }),
      tabIndex: isActive(page) ? 0 : -1,
      type: "radio"
    }, DotProps));
  }));
};
var _default = exports.default = PageControl;