import * as React from 'react';
import type { LayersManagerProps, LayersManagerState, LayersContextProps } from './types';
export declare const LayersContext: React.Context<LayersContextProps>;
export declare const Provider: React.Provider<LayersContextProps>;
export declare const Consumer: React.Consumer<LayersContextProps>;
export default class LayersManager extends React.Component<LayersManagerProps, LayersManagerState> {
    host: React.RefObject<HTMLElement>;
    containerRef: React.RefObject<any>;
    constructor(props: LayersManagerProps);
    componentDidMount(): void;
    componentWillUnmount(): void;
    onDocumentClick: (event: MouseEvent) => void;
    onKeyDown: (event: KeyboardEvent) => void;
    onKeyUp: (event: KeyboardEvent) => void;
    onKeyPress: (event: KeyboardEvent) => void;
    onAddEscapeHandler: (escapeKeyHandler: () => unknown) => void;
    onRemoveEscapeHandler: (escapeKeyHandler: () => unknown) => void;
    onAddKeyDownHandler: (keyDownHandler: (event: KeyboardEvent) => void) => void;
    onRemoveKeyDownHandler: (keyDownHandler: (event: KeyboardEvent) => void) => void;
    onAddKeyUpHandler: (keyUpHandler: (event: KeyboardEvent) => void) => void;
    onRemoveKeyUpHandler: (keyUpHandler: (event: KeyboardEvent) => void) => void;
    onAddKeyPressHandler: (keyPressHandler: (event: KeyboardEvent) => void) => void;
    onRemoveKeyPressHandler: (keyPressHandler: (event: KeyboardEvent) => void) => void;
    onAddDocClickHandler: (docClickHandler: (event: MouseEvent) => void) => void;
    onRemoveDocClickHandler: (docClickHandler: (event: MouseEvent) => void) => void;
    render(): React.JSX.Element;
}
