"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ActionButton = ActionButton;
var React = _interopRequireWildcard(require("react"));
var _button = require("../button");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); } /*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
function ActionButton({
  children,
  size,
  ...restProps
}) {
  const iconButtonStyle = {
    paddingTop: 0,
    paddingBottom: 0,
    paddingLeft: 0,
    paddingRight: 0
  };

  // compact buttons need a pseudo-element to acheive a 48px tap target
  const compactButtonStyle = {
    position: 'relative',
    ':after': {
      content: '""',
      position: 'absolute',
      height: '48px',
      width: '48px'
    }
  };
  return /*#__PURE__*/React.createElement(_button.Button, _extends({
    kind: _button.KIND.tertiary,
    shape: _button.SHAPE.square,
    size: size,
    overrides: {
      BaseButton: {
        style: {
          ...(size === _button.SIZE.compact ? compactButtonStyle : {}),
          ...(typeof children !== 'string' ? iconButtonStyle : {})
        }
      }
    }
  }, restProps), children);
}