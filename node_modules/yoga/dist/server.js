"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var apollo_server_express_1 = require("apollo-server-express");
var chokidar_1 = require("chokidar");
var express_1 = __importDefault(require("express"));
var fs_1 = require("fs");
var nexus_1 = require("nexus");
var nexus_prisma_1 = require("nexus-prisma");
var path = __importStar(require("path"));
var pretty_error_1 = __importDefault(require("pretty-error"));
var ts_node_1 = require("ts-node");
var config_1 = require("./config");
var helpers_1 = require("./helpers");
var logger = __importStar(require("./logger"));
var nexusDefaults_1 = require("./nexusDefaults");
var pe = new pretty_error_1.default().appendStyle({
    'pretty-error': {
        marginLeft: '0',
    },
    'pretty-error > header > title > kind': {
        background: 'red',
        color: 'bright-white',
        padding: '1',
    },
});
// Provide on-the-fly ts transpilation when requiring .ts files
ts_node_1.register({
    transpileOnly: true,
    pretty: true,
});
function watch(env) {
    return __awaiter(this, void 0, void 0, function () {
        var info, filesToWatch, oldServer, filesToReloadBatched;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    logger.clearConsole();
                    logger.info('Starting development server...');
                    info = config_1.importYogaConfig({ env: env });
                    filesToWatch = [path.join(info.projectDir, '**', '*.ts')];
                    if (info.prismaClientDir && info.datamodelInfoDir) {
                        filesToWatch.push(info.prismaClientDir);
                        filesToWatch.push(info.datamodelInfoDir);
                    }
                    return [4 /*yield*/, start(info, true)];
                case 1:
                    oldServer = _a.sent();
                    filesToReloadBatched = [];
                    chokidar_1.watch(filesToWatch, {
                        usePolling: true,
                        ignored: getIgnoredFiles(info.projectDir, info.yogaConfig, info.datamodelInfoDir, info.prismaClientDir),
                    }).on('raw', function (eventName, fileName) { return __awaiter(_this, void 0, void 0, function () {
                        var _a, server, startServer, stopServer, serverInstance, e_1;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    _b.trys.push([0, 6, , 7]);
                                    if (eventName === 'change' &&
                                        info.yogaConfig.prisma &&
                                        (fileName === path.join(info.prismaClientDir, 'index.ts') ||
                                            fileName === path.join(info.datamodelInfoDir, 'datamodel-info.ts'))) {
                                        filesToReloadBatched.push(fileName);
                                        if (filesToReloadBatched.length === 2) {
                                            // TODO: Do not invalidate everything, only the necessary stuff
                                            info = config_1.importYogaConfig({ invalidate: true, env: env });
                                            filesToReloadBatched = [];
                                        }
                                        else {
                                            return [2 /*return*/, Promise.resolve(true)];
                                        }
                                    }
                                    if (!(eventName === 'change' || eventName === 'unlink')) return [3 /*break*/, 5];
                                    logger.clearConsole();
                                    logger.info('Compiling');
                                    _a = getYogaServer(info), server = _a.server, startServer = _a.startServer, stopServer = _a.stopServer;
                                    if (!(oldServer !== undefined)) return [3 /*break*/, 2];
                                    return [4 /*yield*/, stopServer(oldServer)];
                                case 1:
                                    _b.sent();
                                    _b.label = 2;
                                case 2: return [4 /*yield*/, server()];
                                case 3:
                                    serverInstance = _b.sent();
                                    logger.clearConsole();
                                    logger.done('Compiled succesfully');
                                    return [4 /*yield*/, startServer(serverInstance)];
                                case 4:
                                    oldServer = _b.sent();
                                    _b.label = 5;
                                case 5: return [3 /*break*/, 7];
                                case 6:
                                    e_1 = _b.sent();
                                    console.error(pe.render(e_1));
                                    return [3 /*break*/, 7];
                                case 7: return [2 /*return*/];
                            }
                        });
                    }); });
                    return [2 /*return*/];
            }
        });
    });
}
exports.watch = watch;
function getIgnoredFiles(projectDir, yogaConfig, datamodelInfoDir, prismaClientDir) {
    var ignoredFiles = [
        yogaConfig.output.schemaPath,
        yogaConfig.output.typegenPath,
        path.join(projectDir, 'node_modules'),
    ];
    if (datamodelInfoDir) {
        ignoredFiles.push(path.join(datamodelInfoDir, 'nexus-prisma.ts'));
        ignoredFiles.push(path.join(datamodelInfoDir, 'index.ts'));
    }
    if (prismaClientDir) {
        ignoredFiles.push(path.join(prismaClientDir, 'prisma-schema.ts'));
    }
    return ignoredFiles;
}
function start(info, withLog) {
    if (withLog === void 0) { withLog = false; }
    return __awaiter(this, void 0, void 0, function () {
        var _a, server, startServer, serverInstance, e_2;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    _a = getYogaServer(info), server = _a.server, startServer = _a.startServer;
                    return [4 /*yield*/, server()];
                case 1:
                    serverInstance = _b.sent();
                    if (withLog) {
                        logger.clearConsole();
                        logger.done('Compiled successfully');
                    }
                    return [2 /*return*/, startServer(serverInstance)];
                case 2:
                    e_2 = _b.sent();
                    console.error(pe.render(e_2));
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.start = start;
/**
 * Dynamically import GraphQL types from the ./src/graphql folder
 * and also from the context file
 *
 * @param resolversPath The `resolversPath` property from the `yoga.config.ts` file
 * @param contextPath The `contextPath` property from the `yoga.config.ts` file
 * @param expressPath The `expressPath` property from the `yoga.config.ts` file
 */
function importArtifacts(resolversPath, contextPath, expressPath) {
    var resolversIndexPath = path.join(resolversPath, 'index.ts');
    var types = null;
    if (fs_1.existsSync(resolversIndexPath)) {
        types = helpers_1.importFile(resolversIndexPath, undefined, true);
    }
    else {
        types = helpers_1.findFileByExtension(resolversPath, '.ts').map(function (file) {
            return helpers_1.importFile(file, undefined, true);
        });
    }
    var context = undefined;
    var express = undefined;
    if (contextPath !== undefined) {
        context = helpers_1.importFile(contextPath, 'default', true);
        if (typeof context !== 'function') {
            throw new Error(contextPath + " must default export a function");
        }
    }
    if (expressPath !== undefined) {
        express = helpers_1.importFile(expressPath, 'default', true);
        if (typeof express !== 'function') {
            throw new Error(expressPath + " must default export a function");
        }
    }
    return {
        context: context,
        expressMiddleware: express,
        types: types,
    };
}
/**
 *
 * @param config The yoga config object
 */
function getYogaServer(info) {
    var config = info.yogaConfig;
    if (!config.ejectFilePath) {
        return {
            server: function () {
                return __awaiter(this, void 0, void 0, function () {
                    var app, _a, types, context, expressMiddleware, makeSchemaOptions, schema, server;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                app = express_1.default();
                                _a = importArtifacts(config.resolversPath, config.contextPath, config.expressPath), types = _a.types, context = _a.context, expressMiddleware = _a.expressMiddleware;
                                makeSchemaOptions = nexusDefaults_1.makeSchemaDefaults(config, types, info.prismaClientDir);
                                schema = config.prisma
                                    ? nexus_prisma_1.makePrismaSchema(__assign({}, makeSchemaOptions, { prisma: config.prisma }))
                                    : nexus_1.makeSchema(makeSchemaOptions);
                                server = new apollo_server_express_1.ApolloServer({
                                    schema: schema,
                                    context: context,
                                });
                                if (!expressMiddleware) return [3 /*break*/, 2];
                                return [4 /*yield*/, expressMiddleware(app)];
                            case 1:
                                _b.sent();
                                _b.label = 2;
                            case 2:
                                server.applyMiddleware({ app: app, path: '/' });
                                return [2 /*return*/, app];
                        }
                    });
                });
            },
            startServer: function (express) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                var port = process.env.PORT || 4000;
                                var httpServer = express
                                    .listen({ port: port }, function () {
                                    console.log("\uD83D\uDE80  Server ready at http://localhost:" + port + "/");
                                    resolve(httpServer);
                                })
                                    .on('error', function (err) { return reject(err); });
                            })];
                    });
                });
            },
            stopServer: function (httpServer) {
                return httpServer.close();
            },
        };
    }
    var yogaServer = helpers_1.importFile(config.ejectFilePath, 'default', true);
    if (yogaServer.server && yogaServer.startServer && yogaServer.stopServer) {
        return yogaServer;
    }
    throw new Error("Invalid 'src/server.ts' file");
}
//# sourceMappingURL=server.js.map