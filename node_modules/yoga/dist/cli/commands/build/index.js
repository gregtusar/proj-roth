"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("fs");
var path = __importStar(require("path"));
var ts = __importStar(require("typescript"));
var config_1 = require("../../../config");
var yogaDefaults_1 = require("../../../yogaDefaults");
var renderers_1 = require("./renderers");
var diagnosticHost = {
    getNewLine: function () { return ts.sys.newLine; },
    getCurrentDirectory: function () { return process.cwd(); },
    getCanonicalFileName: function (path) { return path; },
};
exports.default = (function (argv) {
    var info = config_1.importYogaConfig({ env: argv.env });
    var config = readConfigFromTsConfig(info);
    compile(config.fileNames, config.options);
    var ejectFilePath = writeEjectFiles(info, function (filePath, content) {
        outputFile(filePath, content, config.options, info);
    });
    useEntryPoint(info, ejectFilePath, config);
});
function compile(rootNames, options) {
    var program = ts.createProgram({
        rootNames: rootNames,
        options: options,
    });
    var emitResult = program.emit();
    var allDiagnostics = ts
        .getPreEmitDiagnostics(program)
        .concat(emitResult.diagnostics);
    if (allDiagnostics.length > 0) {
        throw new Error(ts.formatDiagnosticsWithColorAndContext(allDiagnostics, diagnosticHost));
    }
}
function useEntryPoint(info, ejectFilePath, config) {
    var indexFile = renderers_1.renderIndexFile(ejectFilePath);
    var indexFilePath = path.join(path.dirname(ejectFilePath), 'index.ts');
    outputFile(indexFilePath, indexFile, config.options, info);
}
function writeEjectFiles(info, writeFile) {
    if (info.yogaConfig.ejectFilePath) {
        return info.yogaConfig.ejectFilePath;
    }
    var ejectFilePath = path.join(info.projectDir, yogaDefaults_1.DEFAULTS.ejectFilePath);
    var ejectFile = info.yogaConfig.prisma
        ? renderers_1.renderPrismaEjectFile(ejectFilePath, info)
        : renderers_1.renderSimpleIndexFile(ejectFilePath, info);
    writeFile(ejectFilePath, ejectFile);
    var resolverIndexPath = path.join(info.yogaConfig.resolversPath, 'index.ts');
    if (!fs_1.existsSync(resolverIndexPath)) {
        var resolverIndexFile = renderers_1.renderResolversIndex(info);
        writeFile(resolverIndexPath, resolverIndexFile);
    }
    return ejectFilePath;
}
exports.writeEjectFiles = writeEjectFiles;
function getTranspiledPath(projectDir, filePath, outDir) {
    var pathFromRootToFile = path.relative(projectDir, filePath);
    var jsFileName = path.basename(pathFromRootToFile, '.ts') + '.js';
    var pathToJsFile = path.join(path.dirname(pathFromRootToFile), jsFileName);
    return path.join(outDir, pathToJsFile);
}
exports.getTranspiledPath = getTranspiledPath;
function getRelativePath(sourceDir, targetPath) {
    var relativePath = path.relative(sourceDir, targetPath);
    if (!relativePath.startsWith('.')) {
        relativePath = './' + relativePath;
    }
    // remove .ts or .js file extension
    relativePath = relativePath.replace(/\.(ts|js)$/, '');
    // remove /index
    relativePath = relativePath.replace(/\/index$/, '');
    // replace \ with /
    relativePath = relativePath.replace(/\\/g, '/');
    return relativePath;
}
exports.getRelativePath = getRelativePath;
function transpileModule(input, compilerOptions) {
    return ts.transpileModule(input, { compilerOptions: compilerOptions }).outputText;
}
function outputFile(filePath, fileContent, compilerOptions, info) {
    var transpiled = transpileModule(fileContent, compilerOptions);
    var outFilePath = getTranspiledPath(info.projectDir, filePath, compilerOptions.outDir);
    fs_1.writeFileSync(outFilePath, transpiled);
}
function fixConfig(config, projectDir) {
    // Target ES5 output by default (instead of ES3).
    if (config.options.target === undefined) {
        config.options.target = ts.ScriptTarget.ES5;
    }
    // Target CommonJS modules by default (instead of magically switching to ES6 when the target is ES6).
    if (config.options.module === undefined) {
        config.options.module = ts.ModuleKind.CommonJS;
    }
    if (config.options.outDir === undefined) {
        config.options.outDir = 'dist';
    }
    config.options.rootDir = projectDir;
    return config;
}
function readConfigFromTsConfig(info) {
    var tsConfigPath = config_1.findConfigFile('tsconfig.json', { required: true });
    var tsConfigContent = ts.readConfigFile(tsConfigPath, ts.sys.readFile);
    if (tsConfigContent.error) {
        throw new Error(ts.formatDiagnosticsWithColorAndContext([tsConfigContent.error], diagnosticHost));
    }
    var inputConfig = ts.parseJsonConfigFileContent(tsConfigContent.config, ts.sys, info.projectDir, undefined, tsConfigPath);
    return fixConfig(inputConfig, info.projectDir);
}
exports.readConfigFromTsConfig = readConfigFromTsConfig;
//# sourceMappingURL=index.js.map