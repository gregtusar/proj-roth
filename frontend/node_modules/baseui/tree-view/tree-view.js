"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TreeView;
var React = _interopRequireWildcard(require("react"));
var _treeNode = _interopRequireDefault(require("./tree-node"));
var _styledComponents = require("./styled-components");
var _utils = require("./utils");
var _focusVisible = require("../utils/focusVisible");
var _overrides = require("../helpers/overrides");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); } /*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
function TreeView(props) {
  const {
    data,
    indentGuides = false,
    onToggle,
    overrides = {},
    renderAll,
    getId = _utils.defaultGetId
  } = props;
  const {
    Root: RootOverride
  } = overrides;
  const Root = (0, _overrides.getOverride)(RootOverride) || _styledComponents.StyledTreeItemList;
  const firstId = data.length > 0 ? getId(data[0]) : 0;
  const [selectedNodeId, setSelectedNodeId] = React.useState(firstId);
  const [focusVisible, setFocusVisible] = React.useState(false);
  const [typeAheadChars, setTypeAheadChars] = React.useState('');
  const timeOutRef = React.useRef(null);
  const treeItemRefs = {};
  const focusTreeItem = id => {
    if (!id) return;
    setSelectedNodeId(id);
    const refs = treeItemRefs[id];
    // @ts-expect-error
    const node = refs && refs.current;
    if (node) node.focus();
  };
  const onKeyDown = (e, node) => {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const elementId = e.target.getAttribute('data-nodeid');
    // this check prevents bubbling
    // @ts-ignore
    if (elementId !== getId(node) && parseInt(elementId) !== getId(node)) {
      return;
    }
    switch (e.key) {
      case 'ArrowRight':
        e.preventDefault();
        if (typeof node.isExpanded === 'boolean' && !node.isExpanded) {
          onToggle && onToggle(node);
        } else {
          focusTreeItem((0, _utils.getFirstChildId)(data, selectedNodeId, getId));
        }
        break;
      case 'ArrowLeft':
        e.preventDefault();
        if (typeof node.isExpanded === 'boolean' && node.isExpanded) {
          onToggle && onToggle(node);
        } else {
          focusTreeItem((0, _utils.getParentId)(data, selectedNodeId, null, getId));
        }
        break;
      case 'ArrowUp':
        e.preventDefault();
        focusTreeItem((0, _utils.getPrevId)(data, selectedNodeId, null, getId));
        break;
      case 'ArrowDown':
        e.preventDefault();
        focusTreeItem((0, _utils.getNextId)(data, selectedNodeId, null, getId));
        break;
      case ' ':
      case 'Enter':
        e.preventDefault();
        onToggle && onToggle(node);
        break;
      case 'Home':
        e.preventDefault();
        if (data.length) {
          focusTreeItem(getId(data[0]));
        }
        break;
      case 'End':
        e.preventDefault();
        focusTreeItem((0, _utils.getEndId)(data, getId));
        break;
      case '*':
        e.preventDefault();
        (0, _utils.getExpandableSiblings)(data, selectedNodeId, getId).forEach(
        // @ts-ignore
        node => onToggle && onToggle(node));
        break;
      default:
        if (timeOutRef.current !== null) {
          clearTimeout(timeOutRef.current);
        }
        setTypeAheadChars(typeAheadChars + e.key);
        // @ts-ignore
        timeOutRef.current = setTimeout(() => {
          setTypeAheadChars('');
        }, 500);
        focusTreeItem((0, _utils.getCharMatchId)(data, selectedNodeId, typeAheadChars + e.key, null, getId));
        break;
    }
  };
  const onFocus = event => {
    if ((0, _focusVisible.isFocusVisible)(event)) {
      setFocusVisible(true);
    }
    if (selectedNodeId === null && data.length) {
      setSelectedNodeId(getId(data[0]));
    }
  };

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const onBlur = event => {
    if (focusVisible) {
      setFocusVisible(false);
    }
  };
  return /*#__PURE__*/React.createElement(Root, _extends({
    role: "tree"
  }, (0, _overrides.getOverrideProps)(RootOverride)), data.map(node => /*#__PURE__*/React.createElement(_treeNode.default, {
    indentGuides: indentGuides,
    key: getId(node),
    node: node,
    getId: getId,
    onToggle: node => {
      onToggle && onToggle(node);
      focusTreeItem(getId(node));
    },
    overrides: overrides,
    renderAll: renderAll,
    selectedNodeId: selectedNodeId,
    onKeyDown: onKeyDown,
    onFocus: onFocus,
    onBlur: onBlur,
    addRef: (id, ref) => {
      treeItemRefs[id] = ref;
    },
    removeRef: id => {
      delete treeItemRefs[id];
    },
    isFocusVisible: focusVisible
  })));
}