"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs");
const meow = require("meow");
const inquirer = require("inquirer");
const loader_1 = require("./loader");
const templates_1 = require("./templates");
const cli = meow(`
    create-yoga [dir]

    > Scaffolds the initial files of your project.

    Options:
      -t, --template  Select a template. (${templates_1.templatesNames})
      --no-install    Skips dependency installation.
      --force (-f)    Overwrites existing files.
`, {
    flags: {
        'no-install': {
            type: 'boolean',
            default: false,
        },
        template: {
            type: 'string',
            alias: 't',
            default: false,
        },
        force: {
            type: 'boolean',
            default: false,
            alias: 'f',
        },
    },
});
// Main
function main(cli) {
    return __awaiter(this, void 0, void 0, function* () {
        let template = templates_1.defaultTemplate;
        if (cli.flags['template']) {
            const selectedTemplate = templates_1.availableTemplates.find(t => t.name === cli.flags['template']);
            if (selectedTemplate) {
                template = selectedTemplate;
            }
            else {
                console.log(`Unknown template. Available templates: ${templates_1.templatesNames}`);
                return;
            }
        }
        else {
            const res = yield inquirer.prompt([
                {
                    name: 'templateName',
                    message: 'Choose a GraphQL server template?',
                    type: 'list',
                    choices: templates_1.availableTemplates.map(t => ({
                        name: `${t.name} (${t.description})`,
                        value: t.name,
                    })),
                },
            ]);
            template = templates_1.availableTemplates.find(t => t.name === res.templateName);
        }
        let [output] = cli.input;
        if (!output) {
            const res = yield inquirer.prompt([
                {
                    name: 'path',
                    message: 'Where should we scaffold graphql server?',
                    type: 'input',
                    default: '.',
                },
            ]);
            output = res.path;
        }
        if (fs.existsSync(output)) {
            const allowedFiles = ['.git', '.gitignore'];
            const conflictingFiles = fs
                .readdirSync(output)
                .filter(f => !allowedFiles.includes(f));
            if (conflictingFiles.length > 0 && !cli.flags.force) {
                console.log(`Directory ${output} must be empty.`);
                return;
            }
        }
        else {
            fs.mkdirSync(output);
        }
        loader_1.loadYogaStarter(template, path.resolve(output), {
            installDependencies: !cli.flags['no-install'],
        });
    });
}
/**
 * Imports one of the preconfigured yoga templates
 */
exports.createTemplate = () => {
    main(cli);
};
//# sourceMappingURL=index.js.map