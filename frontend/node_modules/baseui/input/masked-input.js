"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MaskedInput;
var React = _interopRequireWildcard(require("react"));
var _reactInputMask = _interopRequireDefault(require("react-input-mask"));
var _input = _interopRequireDefault(require("./input"));
var _styledComponents = require("./styled-components");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); } /*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/ // @ts-ignore
const MaskOverride = /*#__PURE__*/React.forwardRef(({
  // do nothing with these - we just don't want to pass it to the InputMask, as
  // it does not have these properties
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  startEnhancer,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  endEnhancer,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  error,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  positive,
  // below are props that are used by the masked-input
  onChange,
  onFocus,
  onBlur,
  value,
  disabled,
  readOnly,
  ...restProps
}, ref) => {
  return /*#__PURE__*/React.createElement(_reactInputMask.default, _extends({
    onChange: onChange,
    onFocus: onFocus,
    onBlur: onBlur,
    value: value,
    disabled: disabled,
    readOnly: readOnly
  }, restProps), props => /*#__PURE__*/React.createElement(_styledComponents.Input, _extends({
    ref: ref,
    onChange: onChange,
    onFocus: onFocus,
    onBlur: onBlur,
    value: value,
    disabled: disabled,
    readOnly: readOnly
  }, props)));
});
MaskOverride.displayName = 'MaskOverride';
function MaskedInput({
  mask,
  maskChar,
  overrides: {
    Input: inputOverride = {},
    ...restOverrides
  } = {},
  ...restProps
}) {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  let componentOverride = MaskOverride;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  let propsOverride = {};
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  let styleOverride = {};
  if (typeof inputOverride === 'function') {
    componentOverride = inputOverride;
  } else if (typeof inputOverride === 'object') {
    componentOverride = inputOverride.component || componentOverride;
    propsOverride = inputOverride.props || {};
    styleOverride = inputOverride.style || {};
  }
  if (typeof propsOverride === 'object') {
    propsOverride = {
      ...propsOverride,
      mask: propsOverride.mask || mask,
      maskChar: propsOverride.maskChar || maskChar
    };
  }
  const nextOverrides = {
    Input: {
      component: componentOverride,
      props: propsOverride,
      style: styleOverride
    },
    ...restOverrides
  };
  return /*#__PURE__*/React.createElement(_input.default, _extends({}, restProps, {
    overrides: nextOverrides
  }));
}
MaskedInput.defaultProps = {
  maskChar: ' '
};