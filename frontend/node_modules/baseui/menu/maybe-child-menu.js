"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _nestedMenus = require("./nested-menus");
var _popover = require("../popover");
var _overrides = require("../helpers/overrides");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); } /*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
const MaybeChildMenu = props => {
  if (!props.getChildMenu) {
    // @ts-expect-error todo(flow->ts): children should be of type ReactElement or null
    return props.children;
  }
  const ChildMenu = props.getChildMenu(props.item);
  if (!ChildMenu) {
    // @ts-expect-error todo(flow->ts): children should be of type ReactElement or null
    return props.children;
  }
  const {
    overrides = {}
  } = props;
  const [PopoverOverride, popoverProps] = (0, _overrides.getOverrides)(overrides.ChildMenuPopover, _popover.Popover);
  return /*#__PURE__*/React.createElement(_nestedMenus.NestedMenuContext.Consumer, null, ctx => {
    return /*#__PURE__*/React.createElement(PopoverOverride, _extends({
      focusLock: false,
      autoFocus: false,
      isOpen: props.isOpen,
      renderAll: props.renderAll,
      content: ChildMenu,
      ignoreBoundary: true,
      mountNode: ctx.mountRef.current ? ctx.mountRef.current : undefined,
      onClick: props.onClick,
      onMouseEnterDelay: 30,
      onMouseLeaveDelay: 30,
      onEsc: props.resetParentMenu,
      placement: "rightTop"
    }, popoverProps, {
      overrides: (0, _overrides.mergeOverrides)({
        Body: {
          props: {
            // Trap tabbing when focused on a child menu. Popover mounts the element at the end of
            // the html body by default. If a user was to tab to the next element it would navigate
            // to elements not within the immediate area surrounding the menu.
            onKeyDown: e => {
              if (e.keyCode === 9) {
                e.preventDefault();
              }
            }
          }
        }
      }, popoverProps.overrides)
    }), props.children);
  });
};
var _default = exports.default = MaybeChildMenu;