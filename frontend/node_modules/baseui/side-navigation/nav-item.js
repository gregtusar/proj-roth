"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _overrides = require("../helpers/overrides");
var _styledComponents = require("./styled-components");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
class NavItem extends React.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "handleClick", event => {
      const {
        item,
        onSelect
      } = this.props;
      if (typeof onSelect === 'function') {
        onSelect({
          item,
          event
        });
      }
    });
    _defineProperty(this, "handleKeyDown", event => {
      const {
        item,
        onSelect
      } = this.props;
      if (event.key === 'Enter') {
        if (typeof onSelect === 'function') {
          onSelect({
            item,
            event
          });
        }
      }
    });
  }
  render() {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const {
      item,
      overrides,
      itemMemoizationComparator,
      ...sharedProps
    } = this.props;
    const [NavItem, itemProps] = (0, _overrides.getOverrides)(overrides.NavItem, _styledComponents.StyledNavItem);
    const [NavLink, linkProps] = (0, _overrides.getOverrides)(overrides.NavLink, _styledComponents.StyledNavLink);
    const tabIndex = {
      tabIndex: item.disabled ? -1 : undefined
    };
    return /*#__PURE__*/React.createElement(NavLink, _extends({
      $as: item.disabled ? 'span' : 'a',
      href: item.disabled ? null : item.itemId
    }, tabIndex, sharedProps, linkProps, item.itemId && !item.disabled ? {
      onClick: this.handleClick,
      onKeyDown: this.handleKeyDown
    } : {}), /*#__PURE__*/React.createElement(NavItem, _extends({
      item: item
    }, sharedProps, itemProps), item.title));
  }
}

// @ts-ignore
_defineProperty(NavItem, "defaultProps", {
  overrides: {},
  onSelect: () => {}
});
function compare(prevProps, nextProps) {
  if (nextProps.itemMemoizationComparator) {
    return nextProps.itemMemoizationComparator(prevProps, nextProps);
  }
  return false;
}
var _default = exports.default = /*#__PURE__*/React.memo(NavItem, compare);