"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _overrides = require("../helpers/overrides");
var _styledComponents = require("./styled-components");
var _utils = require("./utils");
var _constants = require("./constants");
var _styledComponents2 = require("../checkbox/styled-components");
var _styledComponents3 = require("../radio/styled-components");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); } /*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
const ControlIcon = ({
  selected,
  disabled,
  kind,
  overrides
}) => {
  const [Toggle, toggleProps] = (0, _overrides.getOverrides)(overrides.Toggle, _styledComponents2.Toggle);
  const [ToggleTrack, toggleTrackProps] = (0, _overrides.getOverrides)(overrides.ToggleTrack, _styledComponents2.ToggleTrack);
  const [Checkmark, checkmarkProps] = (0, _overrides.getOverrides)(overrides.Checkmark, _styledComponents2.Checkmark);
  const [RadioMarkOuter, radioMarkOuterProps] = (0, _overrides.getOverrides)(overrides.RadioMarkOuter, _styledComponents3.RadioMarkOuter);
  const [RadioMarkInner, radioMarkInnerProps] = (0, _overrides.getOverrides)(overrides.RadioMarkInner, _styledComponents3.RadioMarkInner);
  let Icon;
  switch (kind) {
    case _constants.TILE_GROUP_KIND.multiSelectLive:
      Icon = /*#__PURE__*/React.createElement(ToggleTrack, _extends({}, toggleTrackProps, {
        $disabled: disabled,
        $checked: selected
      }), /*#__PURE__*/React.createElement(Toggle, _extends({}, toggleProps, {
        $disabled: disabled,
        $checked: selected
      })));
      break;
    case _constants.TILE_GROUP_KIND.singleSelect:
      Icon = /*#__PURE__*/React.createElement(RadioMarkOuter, _extends({}, radioMarkOuterProps, {
        $disabled: disabled,
        $checked: selected
      }), /*#__PURE__*/React.createElement(RadioMarkInner, _extends({}, radioMarkInnerProps, {
        $disabled: disabled,
        $checked: selected
      })));
      break;
    case _constants.TILE_GROUP_KIND.multiSelectBatch:
    default:
      Icon = /*#__PURE__*/React.createElement(Checkmark, _extends({}, checkmarkProps, {
        $disabled: disabled,
        $checked: selected
      }));
      break;
  }
  return Icon;
};
const TileGroup = ({
  overrides = {},
  children,
  selected,
  kind = _constants.TILE_GROUP_KIND.none,
  ariaLabel,
  disabled,
  onClick
}) => {
  const [Root, rootProps] = (0, _overrides.getOverrides)(overrides.Root, _styledComponents.StyledTileGroupRoot);
  const childRefs = {};
  const numItems = React.Children.count(children);
  const isRadioGroup = kind === _constants.TILE_GROUP_KIND.singleSelect;
  return /*#__PURE__*/React.createElement(Root, _extends({
    "data-baseweb": "tile-group"
  }, rootProps, {
    "aria-label": ariaLabel,
    role: isRadioGroup ? 'radiogroup' : 'group'
  }), React.Children.map(children, (child, index) => {
    if (! /*#__PURE__*/React.isValidElement(child)) return null;
    const isSelected = child.props.selected || (0, _utils.isIndexSelected)(selected, index);
    if (isRadioGroup) {
      childRefs[index] = React.createRef;
    }
    return /*#__PURE__*/React.cloneElement(child, {
      // @ts-ignore
      disabled: disabled || child.props.disabled,
      selected: isSelected,
      ref: isRadioGroup ? childRefs[index] : undefined,
      trailingContent: kind !== _constants.TILE_GROUP_KIND.none && !child.props.trailingContent ? () => /*#__PURE__*/React.createElement(ControlIcon, {
        selected: isSelected,
        disabled: disabled,
        kind: kind,
        overrides: overrides
      }) : child.props.trailingContent,
      onKeyDown: event => {
        if (!isRadioGroup) return;
        const value = Number(selected) || 0;
        if (event.key === 'ArrowUp' || event.key === 'ArrowLeft') {
          event.preventDefault && event.preventDefault();
          const prevIndex = value - 1 < 0 ? numItems - 1 : value - 1;
          onClick && onClick(event, prevIndex);
          childRefs[prevIndex]?.current?.focus();
        }
        if (event.key === 'ArrowDown' || event.key === 'ArrowRight') {
          event.preventDefault && event.preventDefault();
          const nextIndex = value + 1 > numItems - 1 ? 0 : value + 1;
          onClick && onClick(event, nextIndex);
          childRefs[nextIndex]?.current?.focus();
        }
      },
      onClick: event => {
        if (disabled) return;
        if (child.props.onClick) {
          child.props.onClick(event);
        }
        if (onClick) {
          onClick(event, index);
        }
      },
      overrides: {
        Root: {
          props: {
            'aria-checked': isSelected,
            role: isRadioGroup ? 'radio' : 'checkbox'
          }
        }
      }
    });
  }));
};
var _default = exports.default = TileGroup;