"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var os_1 = require("os");
var path = __importStar(require("path"));
var _1 = require(".");
var helpers_1 = require("../../../helpers");
function renderIndexFile(ejectFilePath) {
    return "\n  import yoga from '" + _1.getRelativePath(path.dirname(ejectFilePath), ejectFilePath) + "'\n\n  async function main() {\n    const serverInstance = await yoga.server()\n\n    return yoga.startServer(serverInstance)\n  }\n\n  main()\n  ";
}
exports.renderIndexFile = renderIndexFile;
function renderPrismaEjectFile(filePath, info) {
    var fileDir = path.dirname(filePath);
    return "\n  import * as path from 'path'\n  import { ApolloServer, makePrismaSchema, express, yogaEject } from 'yoga'\n  " + renderImportIf('* as types', fileDir, info.yogaConfig.resolversPath) + "\n  " + renderImportIf('context', fileDir, info.yogaConfig.contextPath) + "\n  " + renderImportIf('expressMiddleware', fileDir, info.yogaConfig.expressPath) + "\n  " + renderImportIf('datamodelInfo', fileDir, info.datamodelInfoDir) + "\n  " + renderImportIf('{ prisma }', fileDir, info.prismaClientDir) + "\n\n  export default yogaEject({\n    async server() {\n      const schema = makePrismaSchema({\n        types,\n        prisma: {\n          datamodelInfo,\n          client: prisma\n        },\n        outputs: {\n          schema: " + renderPathJoin(fileDir, info.yogaConfig.output.schemaPath) + ",\n          typegen: " + renderPathJoin(fileDir, info.yogaConfig.output.typegenPath) + "\n        },\n        nonNullDefaults: {\n          input: true,\n          output: true,\n        },\n        typegenAutoConfig: {\n          sources: [\n            " + (info.yogaConfig.contextPath
        ? "{\n              source: " + renderPathJoin(fileDir, info.yogaConfig.contextPath) + ",\n              alias: 'ctx',\n            },"
        : '') + "\n            " + (info.yogaConfig.prisma
        ? "{\n              source: " + renderPathJoin(fileDir, path.join(info.yogaConfig.prisma.datamodelInfo.clientPath, 'index.ts')) + ",\n              alias: 'prisma',\n            },"
        : '') + "\n            " + (info.yogaConfig.typesPath
        ? "{\n              source: " + renderPathJoin(fileDir, info.yogaConfig.typesPath) + ",\n              alias: 'types',\n            }"
        : '') + ",\n          ],\n          " + (info.yogaConfig.contextPath ? "contextType: 'ctx.Context'" : '') + "\n        }\n      })   \n      const apolloServer = new ApolloServer.ApolloServer({\n        schema,\n        " + (info.yogaConfig.contextPath ? 'context' : '') + "\n      })\n      const app = express()\n    \n      " + (info.yogaConfig.expressPath ? 'await expressMiddleware(app)' : '') + "\n      apolloServer.applyMiddleware({ app, path: '/' })\n\n      return app\n    },\n    async startServer(app) {\n      return app.listen({ port: 4000 }, () => {\n        console.log(\n          `\uD83D\uDE80  Server ready at http://localhost:4000/`,\n        )\n      })\n    },\n    async stopServer(http) {\n      http.close()\n    }\n  })\n  ";
}
exports.renderPrismaEjectFile = renderPrismaEjectFile;
function renderSimpleIndexFile(filePath, info) {
    var fileDir = path.dirname(filePath);
    return "import * as path from 'path'\nimport { ApolloServer, makeSchema, express, yogaEject } from 'yoga'\n" + renderImportIf('* as types', fileDir, info.yogaConfig.resolversPath) + "\n" + renderImportIf('context', fileDir, info.yogaConfig.contextPath) + "\n" + renderImportIf('expressMiddleware', fileDir, info.yogaConfig.expressPath) + "\n\nexport default yogaEject({\n  async server() {\n    const schema = makeSchema({\n      types,\n      outputs: {\n        schema: " + renderPathJoin(fileDir, info.yogaConfig.output.schemaPath) + ",\n        typegen: " + renderPathJoin(fileDir, info.yogaConfig.output.typegenPath) + "\n      },\n      nonNullDefaults: {\n        input: true,\n        output: true,\n      },\n      typegenAutoConfig: {\n        sources: [\n          " + (info.yogaConfig.contextPath
        ? "{\n            source: " + renderPathJoin(fileDir, info.yogaConfig.contextPath) + ",\n            alias: 'ctx',\n          },"
        : '') + "\n          " + (info.yogaConfig.typesPath
        ? "{\n            source: " + renderPathJoin(fileDir, info.yogaConfig.typesPath) + ",\n            alias: 'types',\n          },"
        : '') + "\n        ],\n        contextType: 'ctx.Context'\n      }\n    })\n    const apolloServer = new ApolloServer.ApolloServer({\n      schema,\n      " + (info.yogaConfig.contextPath ? 'context' : '') + "\n    })\n    const app = express()\n    \n    " + (info.yogaConfig.expressPath ? 'await expressMiddleware(app)' : '') + "\n    apolloServer.applyMiddleware({ app, path: '/' })\n\n    return app\n  },\n  async startServer(app) {\n    return app.listen({ port: 4000 }, () => {\n      console.log(\n        `\uD83D\uDE80  Server ready at http://localhost:4000/`,\n      )\n    })\n  },\n  async stopServer(http) {\n    http.close()\n  }\n})\n";
}
exports.renderSimpleIndexFile = renderSimpleIndexFile;
function renderPathJoin(sourceDir, targetPath) {
    var relativePath = path.relative(sourceDir, targetPath);
    if (!relativePath.startsWith('.')) {
        relativePath = './' + relativePath;
    }
    return "path.join(__dirname, '" + relativePath.replace(/\\/g, '/') + "')";
}
function renderResolversIndex(info) {
    var resolversFile = helpers_1.findFileByExtension(info.yogaConfig.resolversPath, '.ts');
    return resolversFile
        .map(function (filePath) {
        return "export * from '" + _1.getRelativePath(info.yogaConfig.resolversPath, filePath) + "'";
    })
        .join(os_1.EOL) + "\n    ";
}
exports.renderResolversIndex = renderResolversIndex;
function renderImportIf(importName, sourceDir, targetPath) {
    if (!targetPath) {
        return '';
    }
    return "import " + importName + " from '" + _1.getRelativePath(sourceDir, targetPath) + "'";
}
exports.renderImportIf = renderImportIf;
//# sourceMappingURL=renderers.js.map