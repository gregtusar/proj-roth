"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _overrides = require("../helpers/overrides");
var _navItem = _interopRequireDefault(require("./nav-item"));
var _styledComponents = require("./styled-components");
var _focusVisible = require("../utils/focusVisible");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
class SideNav extends React.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      isFocusVisible: false
    });
    _defineProperty(this, "handleFocus", event => {
      if ((0, _focusVisible.isFocusVisible)(event)) {
        this.setState({
          isFocusVisible: true
        });
      }
    });
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _defineProperty(this, "handleBlur", event => {
      if (this.state.isFocusVisible !== false) {
        this.setState({
          isFocusVisible: false
        });
      }
    });
    _defineProperty(this, "activePredicate", item => item.itemId === this.props.activeItemId);
  }
  render() {
    const {
      activeItemId,
      activePredicate,
      items,
      onChange,
      overrides,
      mapItem
    } = this.props;
    const navLevel = 1;

    // @ts-ignore
    const [Root, rootProps] = (0, _overrides.getOverrides)(overrides.Root, _styledComponents.StyledRoot);
    const [NavItemContainer, itemContainerProps] = (0, _overrides.getOverrides)(
    // @ts-ignore
    overrides.NavItemContainer, _styledComponents.StyledNavItemContainer);
    const [SubNavContainer, subNavContainerProps] = (0, _overrides.getOverrides)(
    // @ts-ignore
    overrides.SubNavContainer, _styledComponents.StyledSubNavContainer);

    // @ts-ignore
    const renderNavItem = (item, level, index, mapItem) => {
      if (typeof mapItem === 'function') {
        // @ts-ignore
        const recMapItem = item => {
          let subNav = [];
          if (item.subNav) {
            subNav = item.subNav.map(recMapItem);
          }
          return mapItem({
            ...item,
            subNav
          });
        };
        item = recMapItem(item);
      }
      const sharedProps = {
        $active: activePredicate ? activePredicate(item, activeItemId) : this.activePredicate(item),
        $level: level,
        $selectable: !!item.itemId,
        $disabled: item.disabled || false
      };
      return /*#__PURE__*/React.createElement(NavItemContainer, _extends({
        key: `${index}-level${level}-${typeof item.title === 'string' ? item.title : item.itemId || ''}`
      }, sharedProps, itemContainerProps, {
        onFocus: (0, _focusVisible.forkFocus)(itemContainerProps, this.handleFocus),
        onBlur: (0, _focusVisible.forkBlur)(itemContainerProps, this.handleBlur)
      }), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_navItem.default, _extends({
        $isFocusVisible: this.state.isFocusVisible,
        item: item,
        itemMemoizationComparator: this.props.itemMemoizationComparator,
        onSelect: onChange,
        overrides: overrides
      }, sharedProps)), item.subNav ? /*#__PURE__*/React.createElement(SubNavContainer, _extends({
        role: "list"
      }, sharedProps, subNavContainerProps), item.subNav.map(subitem => {
        return renderNavItem(subitem, level + 1, index);
      })) : null));
    };
    return /*#__PURE__*/React.createElement(Root, _extends({
      role: "navigation",
      "data-baseweb": "side-navigation"
    }, rootProps), /*#__PURE__*/React.createElement(SubNavContainer, {
      role: "list"
    }, items.map((item, index) => {
      return renderNavItem(item, navLevel, index, mapItem);
    })));
  }
}
exports.default = SideNav;
_defineProperty(SideNav, "defaultProps", {
  activeItemId: '/',
  // @ts-ignore
  activePredicate: null,
  // @ts-ignore
  items: [],
  overrides: {},
  // @ts-ignore
  mapItem: null
});