"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _overrides = require("../helpers/overrides");
var _constants = require("./constants");
var _styledComponents = require("./styled-components");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
class ProgressBar extends React.Component {
  componentDidMount() {
    // TODO(v11): remove warning when switching default Spinner
    if (process.env.NODE_ENV !== "production") {
      if (this.props.errorMessage) {
        console.warn('baseui:ProgressBar The `errorMessage` prop is deprecated in WAI-ARIA v1.2.');
      }
    }
  }
  render() {
    const {
      overrides = {},
      getProgressLabel,
      value,
      size,
      steps,
      successValue,
      minValue,
      maxValue,
      showLabel,
      infinite,
      errorMessage,
      forwardedRef,
      ...restProps
    } = this.props;
    const propsAriaLabel = this.props['aria-label'] || this.props.ariaLabel;
    const progressLabel = getProgressLabel(value, maxValue, minValue);
    const stepsLabel = getStepProgressLabel(value, maxValue, minValue, steps);
    const ariaLabel = propsAriaLabel || this.props.infinite ? 'Loading' : this.props.steps > 1 ? stepsLabel : progressLabel;
    // fallback on successValue (and it's default) if maxValue is not set by user
    const maximumValue = maxValue !== 100 ? maxValue : successValue;
    const [Root, rootProps] = (0, _overrides.getOverrides)(overrides.Root, _styledComponents.StyledRoot);
    const [BarContainer, barContainerProps] = (0, _overrides.getOverrides)(overrides.BarContainer, _styledComponents.StyledBarContainer);
    const [Bar, barProps] = (0, _overrides.getOverrides)(overrides.Bar, _styledComponents.StyledBar);
    const [BarProgress, barProgressProps] = (0, _overrides.getOverrides)(overrides.BarProgress, _styledComponents.StyledBarProgress);
    const [Label, labelProps] = (0, _overrides.getOverrides)(overrides.Label, _styledComponents.StyledLabel);
    const [InfiniteBar, infiniteBarProps] = (0, _overrides.getOverrides)(overrides.InfiniteBar, _styledComponents.StyledInfiniteBar);
    const sharedProps = {
      $infinite: infinite,
      $size: size,
      $steps: steps,
      $successValue: maximumValue,
      $minValue: minValue,
      $maxValue: maximumValue,
      $value: value
    };
    function renderProgressBar() {
      const children = [];
      for (let i = 0; i < steps; i++) {
        children.push(
        /*#__PURE__*/
        // @ts-ignore
        React.createElement(Bar, _extends({
          key: i
        }, sharedProps, barProps), /*#__PURE__*/React.createElement(BarProgress, _extends({
          $index: i
        }, sharedProps, barProgressProps))));
      }
      return children;
    }
    function getStepProgressLabel(value, maxValue, minValue, steps) {
      return `Step ${Math.ceil((value - minValue) / (maxValue - minValue) * steps)} of ${steps}`;
    }
    return (
      /*#__PURE__*/
      /* eslint-disable jsx-a11y/role-supports-aria-props */
      React.createElement(Root, _extends({
        ref: forwardedRef,
        "data-baseweb": "progress-bar",
        role: "progressbar",
        "aria-label": ariaLabel,
        "aria-valuenow": infinite ? null : value,
        "aria-valuemin": infinite ? null : minValue,
        "aria-valuemax": infinite ? null : maximumValue,
        "aria-invalid": errorMessage ? true : null,
        "aria-errormessage": errorMessage
      }, restProps, sharedProps, rootProps), /*#__PURE__*/React.createElement(BarContainer, _extends({}, sharedProps, barContainerProps), infinite ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(InfiniteBar, _extends({
        $isLeft: true,
        $size: sharedProps.$size
      }, infiniteBarProps)), /*#__PURE__*/React.createElement(InfiniteBar, _extends({
        $size: sharedProps.$size
      }, infiniteBarProps))) : renderProgressBar()), showLabel && /*#__PURE__*/React.createElement(Label, _extends({}, sharedProps, labelProps), getProgressLabel(value, maximumValue, minValue)))
    );
    /* eslint-enable jsx-a11y/role-supports-aria-props */
  }
}
_defineProperty(ProgressBar, "defaultProps", {
  getProgressLabel: (value, maxValue, minValue) => `${Math.round((value - minValue) / (maxValue - minValue) * 100)}% Complete`,
  infinite: false,
  overrides: {},
  showLabel: false,
  size: _constants.SIZE.medium,
  steps: 1,
  successValue: 100,
  minValue: 0,
  maxValue: 100,
  value: 0
});
const ForwardedProgressBar = /*#__PURE__*/React.forwardRef(
// @ts-ignore
(props, ref) =>
/*#__PURE__*/
//$FlowExpectedError[cannot-spread-inexact]
React.createElement(ProgressBar, _extends({
  forwardedRef: ref
}, props)));
ForwardedProgressBar.displayName = 'ProgressBar';
var _default = exports.default = ForwardedProgressBar;