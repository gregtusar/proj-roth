"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _overrides = require("../helpers/overrides");
var _input = require("../input");
var _styledComponents = require("./styled-components");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
class Textarea extends React.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      isFocused: this.props.autoFocus || false
    });
    _defineProperty(this, "onFocus", e => {
      this.setState({
        isFocused: true
      });
      // @ts-ignore
      this.props.onFocus(e);
    });
    _defineProperty(this, "onBlur", e => {
      this.setState({
        isFocused: false
      });
      // @ts-ignore
      this.props.onBlur(e);
    });
  }
  render() {
    const {
      overrides = {}
    } = this.props;
    const [Root, rootProps] = (0, _overrides.getOverrides)(overrides.Root, _styledComponents.StyledTextAreaRoot);
    const inputOverrides = (0, _overrides.mergeOverrides)({
      Input: {
        component: _styledComponents.StyledTextarea
      },
      InputContainer: {
        component: _styledComponents.StyledTextareaContainer
      }
    }, overrides);
    return /*#__PURE__*/React.createElement(Root, _extends({
      "data-baseweb": "textarea",
      $isFocused: this.state.isFocused,
      $isReadOnly: this.props.readOnly,
      $disabled: this.props.disabled,
      $error: this.props.error,
      $positive: this.props.positive,
      $required: this.props.required,
      $resize: this.props.resize
    }, rootProps), /*#__PURE__*/React.createElement(_input.BaseInput, _extends({}, this.props, {
      type: _input.CUSTOM_INPUT_TYPE.textarea,
      overrides: inputOverrides,
      onFocus: this.onFocus,
      onBlur: this.onBlur,
      resize: this.props.resize
    })));
  }
}
_defineProperty(Textarea, "defaultProps", {
  autoFocus: false,
  disabled: false,
  readOnly: false,
  error: false,
  name: '',
  onBlur: () => {},
  onChange: () => {},
  onKeyDown: () => {},
  onKeyPress: () => {},
  onKeyUp: () => {},
  onFocus: () => {},
  overrides: {},
  placeholder: '',
  required: false,
  rows: 3,
  size: _input.SIZE.default
});
var _default = exports.default = Textarea;