"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactIs = require("react-is");
var _overrides = require("../helpers/overrides");
var _styledComponents = require("./styled-components");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); } /*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
function StatelessAccordion({
  accordion = true,
  children,
  disabled,
  expanded,
  onChange,
  overrides = {},
  renderAll
}) {
  const {
    Root: RootOverrides,
    ...PanelOverrides
  } = overrides;
  const [Root, rootProps] = (0, _overrides.getOverrides)(RootOverrides, _styledComponents.Root);
  return /*#__PURE__*/React.createElement(Root, _extends({
    "data-baseweb": "accordion"
  }, rootProps), React.Children.map(children, (child, index) => {
    let normalizedChild = (0, _reactIs.isElement)(child) || (0, _reactIs.isPortal)(child) ? child :
    /*#__PURE__*/
    // if primitive value - wrap it in a fragment
    React.createElement(React.Fragment, null, child);
    const key = normalizedChild.key || String(index);
    return /*#__PURE__*/React.cloneElement(normalizedChild, {
      disabled: normalizedChild.props.disabled || disabled,
      expanded: expanded.includes(key),
      key,
      onChange:
      // Don't bother constructing the wrapper function if no one is listening
      onChange && typeof onChange === 'function' ? () => {
        // @ts-ignore
        let next;
        if (accordion) {
          if (expanded.includes(key)) {
            next = [];
          } else {
            next = [key];
          }
        } else {
          if (expanded.includes(key)) {
            next = expanded.filter(k => k !== key);
          } else {
            next = [...expanded, key];
          }
        }
        // @ts-ignore
        onChange({
          key,
          expanded: next
        });
      } : onChange,
      overrides: normalizedChild.props.overrides || PanelOverrides,
      renderAll
    });
  }));
}
var _default = exports.default = StatelessAccordion;