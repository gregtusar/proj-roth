"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SnackbarElement;
var React = _interopRequireWildcard(require("react"));
var _button = require("../button");
var _overrides = require("../helpers/overrides");
var _styles = require("../styles");
var _styledComponents = require("./styled-components");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); } /*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
// todo(flow->ts): types
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const ActionButton = /*#__PURE__*/React.forwardRef(({
  onClick,
  message,
  overrides = {}
}, ref) => {
  const [, theme] = (0, _styles.useStyletron)();
  const [ActionButtonContainer, actionButtonContainerProps] = (0, _overrides.getOverrides)(overrides.ActionButtonContainer, _styledComponents.StyledActionButtonContainer);
  return /*#__PURE__*/React.createElement(ActionButtonContainer, actionButtonContainerProps, /*#__PURE__*/React.createElement(_button.Button, {
    ref: ref,
    overrides: {
      BaseButton: {
        style: {
          color: theme.colors.contentInversePrimary,
          marginRight: theme.direction === 'rtl' ? null : theme.sizing.scale100,
          marginLeft: theme.direction === 'rtl' ? theme.sizing.scale100 : null,
          width: '100%',
          whiteSpace: 'nowrap',
          ':hover': {
            backgroundColor: theme.colors.borderInverseTransparent
          },
          ':active': {
            backgroundColor: theme.colors.backgroundInverseSecondary
          }
        }
      }
    },
    kind: _button.KIND.tertiary,
    onClick: onClick,
    shape: _button.SHAPE.pill
  }, message));
});
ActionButton.displayName = 'ActionButton';
function SnackbarElement({
  actionMessage,
  actionOnClick,
  focus = true,
  message,
  overrides = {},
  progress,
  startEnhancer: StartEnhancer
}) {
  const [css] = (0, _styles.useStyletron)();
  const rootRef = React.useRef(null);
  const [rootWidth, setRootWidth] = React.useState(0);
  React.useEffect(() => {
    if (typeof document !== 'undefined') {
      if (window.ResizeObserver) {
        const observer = new window.ResizeObserver(([entry]) => setRootWidth(entry.contentRect.width));
        if (rootRef.current) {
          observer.observe(rootRef.current);
        }
        return () => observer.disconnect();
      }
    }
  }, []);
  const actionMeasureRef = React.useRef(null);
  const [actionMeasureWidth, setActionMeasureWidth] = React.useState(0);
  React.useEffect(() => {
    if (typeof document !== 'undefined') {
      if (window.ResizeObserver) {
        const observer = new window.ResizeObserver(([entry]) => setActionMeasureWidth(entry.contentRect.width));
        if (actionMeasureRef.current) {
          observer.observe(actionMeasureRef.current);
        }
        return () => observer.disconnect();
      }
    }
  }, [actionMeasureRef.current]);
  const wrapActionButton = actionMeasureWidth > rootWidth / 2;
  const [Root, rootProps] = (0, _overrides.getOverrides)(overrides.Root, _styledComponents.StyledRoot);
  const [Content, contentProps] = (0, _overrides.getOverrides)(overrides.Content, _styledComponents.StyledContent);
  const [StartEnhancerContainer, startEnhancerContainerProps] = (0, _overrides.getOverrides)(overrides.StartEnhancerContainer, _styledComponents.StyledStartEnhancerContainer);
  const [Spinner, spinnerProps] = (0, _overrides.getOverrides)(overrides.Spinner, _styledComponents.StyledSpinner);
  const [Message, messageProps] = (0, _overrides.getOverrides)(overrides.Message, _styledComponents.StyledMessage);
  const [WrapActionButtonContainer, wrapActionButtonContainerProps] = (0, _overrides.getOverrides)(overrides.WrapActionButtonContainer, _styledComponents.StyledWrapActionButtonContainer);
  const prevFocusRef = React.useRef(null);
  const actionButtonRef = React.useRef(null);
  React.useEffect(() => {
    if (typeof document !== 'undefined') {
      if (focus && actionButtonRef.current) {
        // @ts-ignore
        prevFocusRef.current = document.activeElement;
        // @ts-ignore
        actionButtonRef.current.focus();
      }
      return () => {
        if (prevFocusRef.current) {
          // @ts-ignore
          prevFocusRef.current.focus();
        }
      };
    }
  }, [focus]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, actionMessage && /*#__PURE__*/React.createElement("div", {
    className: css({
      position: 'absolute',
      left: '-10000px',
      top: '-10000px'
    })
  }, /*#__PURE__*/React.createElement(ActionButton, {
    ref: actionMeasureRef,
    message: actionMessage,
    onClick: actionOnClick,
    overrides: overrides
  })), /*#__PURE__*/React.createElement(Root, _extends({
    ref: rootRef
  }, rootProps), /*#__PURE__*/React.createElement(Content, contentProps, (Boolean(StartEnhancer) || progress) && /*#__PURE__*/React.createElement(StartEnhancerContainer, startEnhancerContainerProps, StartEnhancer !== null && StartEnhancer !== undefined ? /*#__PURE__*/React.createElement(StartEnhancer, {
    size: 24
  }) : /*#__PURE__*/React.createElement(Spinner, _extends({
    $height: 24,
    $width: 24
  }, spinnerProps))), /*#__PURE__*/React.createElement(Message, _extends({
    $hasSuffix: Boolean(actionMessage)
  }, messageProps), message), actionMessage && !wrapActionButton && /*#__PURE__*/React.createElement(ActionButton, {
    ref: actionButtonRef,
    message: actionMessage,
    onClick: actionOnClick,
    overrides: overrides
  })), actionMessage && wrapActionButton && /*#__PURE__*/React.createElement(WrapActionButtonContainer, wrapActionButtonContainerProps, /*#__PURE__*/React.createElement(ActionButton, {
    ref: actionButtonRef,
    message: actionMessage,
    onClick: actionOnClick,
    overrides: overrides
  }))));
}