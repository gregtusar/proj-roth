"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
const findSiblings = (node, children) => {
  if (children.indexOf(node) !== -1) {
    return children;
  }
  for (let child of children) {
    if (child.children) {
      const siblings = findSiblings(node, child.children);
      if (siblings != null) {
        return siblings;
      }
    }
  }
  return null;
};
class StatefulContainer extends React.Component {
  constructor(props) {
    super(props);
    _defineProperty(this, "onToggle", node => {
      const {
        onToggle,
        singleExpanded
      } = this.props;
      this.setState(prevState => {
        const shouldExpand = !node.isExpanded;
        if (singleExpanded && shouldExpand) {
          const siblings = findSiblings(node, prevState.data);
          if (siblings != null) {
            siblings.forEach(sibling => {
              if (sibling !== node) {
                sibling.isExpanded = false;
              }
            });
          }
        }
        node.isExpanded = shouldExpand;
        return {
          data: prevState.data
        };
      }, () => {
        onToggle && onToggle(node);
      });
    });
    this.state = {
      data: this.props.data
    };
  }
  render() {
    const {
      children,
      ...restProps
    } = this.props;
    const {
      onToggle
    } = this;
    return children(Object.freeze({
      ...restProps,
      ...this.state,
      onToggle
    }));
  }
}
exports.default = StatefulContainer;