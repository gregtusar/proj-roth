"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _overrides = require("../helpers/overrides");
var _styledComponents = require("./styled-components");
var _utils = require("./utils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); } /*
Copyright (c) Uber Technologies, Inc.
This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
const Tile = /*#__PURE__*/React.forwardRef(({
  children,
  tileKind,
  overrides = {},
  label,
  leadingContent,
  trailingContent,
  headerAlignment,
  bodyAlignment,
  selected,
  onClick,
  disabled
}, ref) => {
  const [Root, rootProps] = (0, _overrides.getOverrides)(overrides.Root, _styledComponents.StyledTileRoot);
  const [HeaderContainer, headerContainerProps] = (0, _overrides.getOverrides)(overrides.HeaderContainer, _styledComponents.StyledHeaderContainer);
  const [BodyContainer, bodyContainerProps] = (0, _overrides.getOverrides)(overrides.BodyContainer, _styledComponents.StyledBodyContainer);
  const [LeadingContentContainer, leadingContentContainerProps] = (0, _overrides.getOverrides)(overrides.LeadingContent, _styledComponents.StyledLeadingContentContainer);
  const [TrailingContentContainer, trailingContentContainerProps] = (0, _overrides.getOverrides)(overrides.TrailingContent, _styledComponents.StyledTrailingContentContainer);
  const [BodyContainerContent, bodyContainerContentProps] = (0, _overrides.getOverrides)(overrides.BodyContainerContent, _styledComponents.StyledBodyContainerContent);
  const [LabelContainer, labelContainerProps] = (0, _overrides.getOverrides)(overrides.Label, _styledComponents.StyledLabel);
  const LeadingContent = leadingContent;
  const TrailingContent = trailingContent;
  let Label;
  if (typeof label === 'string') {
    Label = /*#__PURE__*/React.createElement(LabelContainer, _extends({}, labelContainerProps, {
      $disabled: disabled
    }), label);
  } else if (label) {
    const LabelComponent = label;
    Label = /*#__PURE__*/React.createElement(LabelComponent, null);
  }
  const renderTopContainer = (0, _utils.shouldRenderHeaderContainer)(leadingContent, trailingContent);
  return /*#__PURE__*/React.createElement(Root, _extends({
    "data-baseweb": "tile",
    ref: ref
  }, rootProps, {
    $tileKind: tileKind,
    $selected: selected,
    onClick: onClick,
    $disabled: disabled,
    disabled: disabled
  }), renderTopContainer && /*#__PURE__*/React.createElement(HeaderContainer, _extends({}, headerContainerProps, {
    $leadingContent: leadingContent ? true : false,
    $trailingContent: trailingContent ? true : false,
    $alignment: headerAlignment
  }), LeadingContent && /*#__PURE__*/React.createElement(LeadingContentContainer, _extends({}, leadingContentContainerProps, {
    $disabled: disabled
  }), /*#__PURE__*/React.createElement(LeadingContent, null)), TrailingContent && /*#__PURE__*/React.createElement(TrailingContentContainer, _extends({}, trailingContentContainerProps, {
    $disabled: disabled
  }), /*#__PURE__*/React.createElement(TrailingContent, null))), /*#__PURE__*/React.createElement(BodyContainer, _extends({}, bodyContainerProps, {
    $alignment: bodyAlignment
  }), /*#__PURE__*/React.createElement(BodyContainerContent, bodyContainerContentProps, Label && Label, children)));
});
Tile.displayName = 'Tile';
var _default = exports.default = Tile;