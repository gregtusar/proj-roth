"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _locale = require("../locale");
var _overrides = require("../helpers/overrides");
var _constants = require("./constants");
var _maybeChildMenu = _interopRequireDefault(require("./maybe-child-menu"));
var _styledComponents = require("./styled-components");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); } /*
Copyright (c) Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
function OptionList(props, ref) {
  const {
    getChildMenu,
    getItemLabel = item => item ? item.label : '',
    item,
    onClick = () => {},
    onMouseEnter = () => {},
    overrides = {},
    renderHrefAsAnchor = true,
    resetMenu = () => {},
    size = _constants.OPTION_LIST_SIZE.default,
    $isHighlighted,
    renderAll,
    ...restProps
  } = props;
  const [ListItem, listItemProps] = (0, _overrides.getOverrides)(overrides.ListItem, _styledComponents.StyledListItem);
  const [ListItemAnchor, listItemAnchorProps] = (0, _overrides.getOverrides)(overrides.ListItemAnchor, _styledComponents.StyledListItemAnchor);

  // @ts-ignore
  const getItem = item => {
    if (item.href && renderHrefAsAnchor) {
      return /*#__PURE__*/React.createElement(ListItemAnchor, _extends({
        $item: item,
        href: item.href
      }, listItemAnchorProps), getItemLabel(item));
    } else {
      return /*#__PURE__*/React.createElement(React.Fragment, null, getItemLabel(item));
    }
  };
  return /*#__PURE__*/React.createElement(_locale.LocaleContext.Consumer, null, locale => /*#__PURE__*/React.createElement(_maybeChildMenu.default, {
    getChildMenu: getChildMenu,
    isOpen: !!$isHighlighted,
    item: item,
    resetParentMenu: resetMenu,
    renderAll: renderAll,
    onClick: onClick,
    overrides: overrides
  }, /*#__PURE__*/React.createElement(ListItem, _extends({
    ref: ref,
    "aria-label": getChildMenu && getChildMenu(item) ? locale.menu.parentMenuItemAriaLabel : null,
    item: item,
    onClick: onClick,
    onMouseEnter: onMouseEnter,
    $size: size,
    $isHighlighted: $isHighlighted
  }, restProps, listItemProps), getItem({
    isHighlighted: $isHighlighted,
    ...item
  }))));
}

// @ts-ignore
function areEqualShallow(a, b) {
  if (!a || !b) return false;
  for (var key in a) {
    if (a[key] !== b[key]) {
      return false;
    }
  }
  return true;
}

// @ts-ignore
function compare(prevProps, nextProps) {
  return prevProps.$isHighlighted === nextProps.$isHighlighted && prevProps.$isFocused === nextProps.$isFocused && areEqualShallow(prevProps.item, nextProps.item) && areEqualShallow(prevProps.overrides, nextProps.overrides) && prevProps.size === nextProps.size && prevProps.getItemLabel === nextProps.getItemLabel && prevProps.getChildMenu === nextProps.getChildMenu && prevProps.resetMenu === nextProps.resetMenu;
}

// @ts-ignore
const forwarded = /*#__PURE__*/React.forwardRef(OptionList);
forwarded.displayName = 'OptionList';
var _default = exports.default = /*#__PURE__*/React.memo(forwarded, compare);