"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Stepper = Stepper;
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _overrides = require("../helpers/overrides");
var _button = require("../button");
var _input = require("../input");
var _icon = require("../icon");
var _styledComponents = require("./styled-components");
var _styles = require("../styles");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); } /*
Copyright (c) Uber Technologies, Inc.
This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
const DefaultButton = ({
  children,
  ...restProps
}) => {
  return /*#__PURE__*/React.createElement(_button.Button, _extends({
    shape: _button.SHAPE.circle,
    kind: _button.KIND.secondary,
    size: _button.SIZE.compact
  }, restProps), children);
};
function Stepper({
  value,
  disabled = false,
  overrides = {},
  setValue,
  minValue = 0,
  maxValue
}) {
  const [Root, rootProps] = (0, _overrides.getOverrides)(overrides.Root, _styledComponents.StyledRoot);
  const [Input, inputProps] = (0, _overrides.getOverrides)(overrides.Input, _input.Input);
  const [DecrementButton, decrementButtonProps] = (0, _overrides.getOverrides)(overrides.DecrementButton, DefaultButton);
  const [DecrementButtonIcon, decrementButtonIconProps] = (0, _overrides.getOverrides)(overrides.DecrementButtonIcon, _icon.CheckIndeterminate);
  const [IncrementButton, incrementButtonProps] = (0, _overrides.getOverrides)(overrides.DecrementButton, DefaultButton);
  const [IncrementButtonIcon, incrementButtonIconProps] = (0, _overrides.getOverrides)(overrides.DecrementButtonIcon, _icon.Plus);
  const handleInputChange = e => {
    const newValue = Number(e.target.value);
    if (!isNaN(newValue) && (!maxValue || newValue <= maxValue) && newValue >= minValue) {
      setValue(newValue);
    }
  };
  const [, theme] = (0, _styles.useStyletron)();
  return /*#__PURE__*/React.createElement(Root, rootProps, /*#__PURE__*/React.createElement(DecrementButton, _extends({
    onClick: () => setValue(value - 1),
    disabled: disabled || value <= minValue,
    "aria-label": "decrement value"
  }, decrementButtonProps), /*#__PURE__*/React.createElement(DecrementButtonIcon, decrementButtonIconProps)), /*#__PURE__*/React.createElement(Input, _extends({
    value: value,
    onChange: handleInputChange,
    disabled: disabled,
    "aria-label": "value",
    overrides: {
      Root: {
        style: {
          maxWidth: '36px',
          height: '36px',
          borderLeftStyle: 'none',
          borderRightStyle: 'none',
          borderTopStyle: 'none',
          borderBottomStyle: 'none'
        }
      },
      Input: {
        style: {
          paddingTop: 0,
          paddingBottom: 0,
          paddingLeft: 0,
          paddingRight: 0,
          textAlign: 'center',
          backgroundColor: theme.colors.backgroundPrimary,
          ...theme.typography.LabelLarge
        }
      }
    }
  }, inputProps)), /*#__PURE__*/React.createElement(IncrementButton, _extends({
    onClick: () => setValue(value + 1)
    // @ts-expect-error todo(ts-migration) TS18048 'maxValue' is possibly 'undefined'.
    ,
    disabled: disabled || value >= maxValue,
    "aria-label": "increment value"
  }, incrementButtonProps), /*#__PURE__*/React.createElement(IncrementButtonIcon, incrementButtonIconProps)));
}
var _default = exports.default = Stepper;